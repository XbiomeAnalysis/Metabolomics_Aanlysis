[["index.html", "Data Analysis in Metabolomics Chapter 1 Introduction 1.1 What is metabolomics? 1.2 What are the procedures in this template? 1.3 Software 1.4 Reference", " Data Analysis in Metabolomics Hua Zou and Bangzhuo Tong 2022-08-11 Chapter 1 Introduction 1.1 What is metabolomics? Metabolomics is the large-scale study of small molecules, commonly known as metabolites, within cells, biofluids, tissues or organisms. Collectively, these small molecules and their interactions within a biological system are known as the metabolome. Figure 1.1: Overview of the four major omics fields, from genomics to metabolomics Just as genomics is the study of DNA and genetic information within a cell, and transcriptomics is the study of RNA and differences in mRNA expression; metabolomics is the study of substrates and products of metabolism, which are influenced by both genetic and environmental factors. Metabolomics is a powerful approach because metabolites and their concentrations, unlike other “omics” measures, directly reflect the underlying biochemical activity and state of cells / tissues. Thus metabolomics best represents the molecular phenotype. 1.2 What are the procedures in this template? Figure 1.2: Workflow in Data Analysis on metabolomics 1.2.1 Statistical Analysis Due to terrible experience on Statistical Analysis in Metabolomics via MetaboAnalystR R package, we try to provide a reproducible and easy-to-use template for visualization, pre-processing, exploration, and statistical analysis on metabolomic data by other packages and scripts. Here, the template comprises the following procedures: Data Processing Data Checking Data Filtering Missing Value Imputation Data Normalization Cluster Analysis Hierarchical Clustering Partitional Clustering Chemometrics Analysis Principal Component Analysis (PCA) Partial Least Squares-Discriminant Analysis (PLS-DA) Sparse Partial Least Squares-Discriminant Analysis (sPLS-DA) Univariate Analysis Fold Change Analysis T Tests Wilcoxon Test Limma Test Wilcoxon Test Volcano plot Correlation Heatmaps glasso Feature selection Lasso Ridge Elasticnet Classification Random Forest Network Analysis SPRING Spearman SparCC Network comparison 1.2.2 Functional Analysis Following two chapters would focus on the Enrichment Analysis and Pathway Analysis of metabolomic data. Enrichment Analysis includes three sections (i.e., ORA, SSP and QEA) and Pathway Analysis only includes ORA and QEA. The main difference between Enrichment Analysis and Pathway Analysis are the data set that input metabolites are enriched to. In Enrichment Analysis, input metabolites are enriched to pre-defined metabolite sets while in Pathway Analysis, metabolites are enriched to pathways in KEGG. Enrichment Analysis Single Sample Profiling Over representation analysis Quantitative Enrichment Analysis Pathway Analysis Over representation analysis Quantitative Enrichment Analysis 1.3 Software R 4.1.2 or later release Download link. Rstudio Desktop Download link. 1.4 Reference Metabolomics on EBI "],["data-processing.html", "Chapter 2 Data Processing 2.1 Loading packages 2.2 Importing data 2.3 Data Checking 2.4 Data Filtering 2.5 Missing Value Imputation 2.6 Data Normalization 2.7 Removing outliers 2.8 Saving datasets into RDS files 2.9 Systematic Information", " Chapter 2 Data Processing Although the horrible experience of data analysis by using MetaboAnalystR R package (Pang et al. 2020), its thought of data processing are very useful. Therefore, this template is based on the workflow from MetaboAnalystR. We integrated R packages and our own scripts to build the data analysis template on metabolomic data. Particularly, we thanks very much for POMA R package (Castellano-Escuder et al. 2021). POMA is a flexible data cleaning and statistical analysis processes in one comprehensible and user-friendly R package. 2.1 Loading packages knitr::opts_chunk$set(warning = F) library(dplyr) library(tibble) library(POMA) library(ggplot2) library(ggraph) library(plotly) library(readxl) library(SummarizedExperiment) # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 2.2 Importing data The dataset is from the Zeybel-2022 published paper (Zeybel et al. 2022). features table profile &lt;- readxl::read_xlsx(&quot;./dataset/OmicsDataSet-Zeybel-2022.xlsx&quot;, sheet = 6) head(profile) ## # A tibble: 6 × 67 ## BIOCHEMICAL `SUPER PATHWAY` `SUB PATHWAY` `COMP ID` PLATFORM `CHEMICAL ID` RI MASS PUBCHEM ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 (14 or 15)-m… Lipid Fatty Acid, … 38768 LC/MS N… 100002945 5695 269. 8181;1… ## 2 (16 or 17)-m… Lipid Fatty Acid, … 38296 LC/MS N… 100002356 5993 297. 3083779 ## 3 (2 or 3)-dec… Lipid Medium Chain… 63436 LC/MS N… 100021502 4990 169. &lt;NA&gt; ## 4 (2,4 or 2,5)… Xenobiotics Food Compone… 62533 LC/MS N… 100020519 3474 201. &lt;NA&gt; ## 5 (N(1) + N(8)… Amino Acid Polyamine Me… 57814 LC/MS P… 100016038 3080 188. 123689… ## 6 (R)-3-hydrox… Lipid Fatty Acid M… 43264 LC/MS P… 100003926 2400 248. 534816… ## # … with 58 more variables: CAS &lt;chr&gt;, KEGG &lt;chr&gt;, `SampleID HMDBID` &lt;chr&gt;, P101001 &lt;dbl&gt;, ## # P101012 &lt;dbl&gt;, P101030 &lt;dbl&gt;, P101031 &lt;dbl&gt;, P101050 &lt;dbl&gt;, P101059 &lt;dbl&gt;, P101071 &lt;dbl&gt;, ## # P101072 &lt;dbl&gt;, P101084 &lt;dbl&gt;, P101003 &lt;dbl&gt;, P101004 &lt;dbl&gt;, P101013 &lt;dbl&gt;, P101016 &lt;dbl&gt;, ## # P101017 &lt;dbl&gt;, P101038 &lt;dbl&gt;, P101051 &lt;dbl&gt;, P101061 &lt;dbl&gt;, P101062 &lt;dbl&gt;, P101074 &lt;dbl&gt;, ## # P101075 &lt;dbl&gt;, P101076 &lt;dbl&gt;, P101085 &lt;dbl&gt;, P101088 &lt;dbl&gt;, P101007 &lt;dbl&gt;, P101018 &lt;dbl&gt;, ## # P101019 &lt;dbl&gt;, P101041 &lt;dbl&gt;, P101052 &lt;dbl&gt;, P101064 &lt;dbl&gt;, P101065 &lt;dbl&gt;, P101077 &lt;dbl&gt;, ## # P101090 &lt;dbl&gt;, P101094 &lt;dbl&gt;, P101009 &lt;dbl&gt;, P101010 &lt;dbl&gt;, P101021 &lt;dbl&gt;, P101022 &lt;dbl&gt;, … metadata table metadata &lt;- readxl::read_xlsx(&quot;./dataset/OmicsDataSet-Zeybel-2022.xlsx&quot;, sheet = 2) head(metadata) ## # A tibble: 6 × 11 ## PatientID Stage Metabolomics Proteomics GutMetagenomics OralMetagenomics LiverFatClass Gender ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 P101001 Before Send Send Send Send Severe Male ## 2 P101003 Before Send Send Send Send None Female ## 3 P101004 Before Send Send Send Send Moderate Male ## 4 P101007 Before Send Send Send Send Severe Female ## 5 P101009 Before Send Send Send Send Moderate Male ## 6 P101010 Before Send Send Send Send Mild Male ## # … with 3 more variables: AlcoholConsumption &lt;chr&gt;, Smoker &lt;chr&gt;, Age &lt;dbl&gt; Data Preparation: SummarizedExperiment object getSEobject &lt;- function(x, y) { target &lt;- x %&gt;% dplyr::mutate(Metabolomics == &quot;Send&quot;) %&gt;% dplyr::select(PatientID, LiverFatClass, Gender, Smoker, Age, AlcoholConsumption) sid &lt;- intersect(target$PatientID, colnames(profile)) features &lt;- y %&gt;% dplyr::select(all_of(sid)) %&gt;% data.frame() %&gt;% t() colnames(features) &lt;- paste0(&quot;M_&quot;, profile$`COMP ID`) target &lt;- target[pmatch(sid, target$PatientID), , F] res &lt;- PomaSummarizedExperiment(target = target, features = features) return(res) } se &lt;- getSEobject(metadata, profile) se ## class: SummarizedExperiment ## dim: 1032 55 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(1032): M_38768 M_38296 ... M_57517 M_15581 ## rowData names(0): ## colnames(55): P101001 P101003 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption Extract data for test dataset get_testData &lt;- function(object, num = 200) { features_tab &lt;- SummarizedExperiment::assay(object) %&gt;% t() metadata_tab &lt;- SummarizedExperiment::colData(object) %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;ID&quot;) res &lt;- PomaSummarizedExperiment(target = metadata_tab, features = features_tab[, 1:num]) return(res) } se &lt;- get_testData(object = se) se ## class: SummarizedExperiment ## dim: 200 55 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(200): M_38768 M_38296 ... M_31787 M_63361 ## rowData names(0): ## colnames(55): P101001 P101003 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption 2.3 Data Checking Features in PomaSummarizedExperiment object must have the following criterion: All data values are numeric. A total of 0 (0%) missing values were detected. CheckData &lt;- function(object) { features_tab &lt;- SummarizedExperiment::assay(object) # numeric &amp; missing values int_mat &lt;- features_tab rowNms &lt;- rownames(int_mat) colNms &lt;- colnames(int_mat) naNms &lt;- sum(is.na(int_mat)) for (i in 1:ncol(int_mat)) { if (class(int_mat[, i]) == &quot;integer64&quot;) { int_mat[, i] &lt;- as.double(int_mat[, i]) } } num_mat &lt;- apply(int_mat, 2, as.numeric) if (sum(is.na(num_mat)) &gt; naNms) { num_mat &lt;- apply(int_mat, 2, function(x) as.numeric(gsub(&quot;,&quot;, &quot;&quot;, x))) if (sum(is.na(num_mat)) &gt; naNms) { message(&quot;&lt;font color=\\&quot;red\\&quot;&gt;Non-numeric values were found and replaced by NA.&lt;/font&gt;&quot;) } else { message(&quot;All data values are numeric.&quot;) } } else { message(&quot;All data values are numeric.&quot;) } int_mat &lt;- num_mat rownames(int_mat) &lt;- rowNms colnames(int_mat) &lt;- colNms varCol &lt;- apply(int_mat, 2, var, na.rm = T) constCol &lt;- (varCol == 0 | is.na(varCol)) constNum &lt;- sum(constCol, na.rm = T) if (constNum &gt; 0) { message(paste(&quot;&lt;font color=\\&quot;red\\&quot;&gt;&quot;, constNum, &quot;features with a constant or single value across samples were found and deleted.&lt;/font&gt;&quot;)) int_mat &lt;- int_mat[, !constCol, drop = FALSE] } totalCount &lt;- nrow(int_mat) * ncol(int_mat) naCount &lt;- sum(is.na(int_mat)) naPercent &lt;- round(100 * naCount/totalCount, 1) message(paste(&quot;A total of &quot;, naCount, &quot; (&quot;, naPercent, &quot;%) missing values were detected.&quot;, sep = &quot;&quot;)) # save int_mat into se object target &lt;- SummarizedExperiment::colData(object) %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;SampleID&quot;) res &lt;- PomaSummarizedExperiment(target = target, features = t(int_mat)) return(res) } se &lt;- CheckData(object = se) ## All data values are numeric. ## A total of 1146 (10.4%) missing values were detected. se ## class: SummarizedExperiment ## dim: 200 55 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(200): M_38768 M_38296 ... M_31787 M_63361 ## rowData names(0): ## colnames(55): P101001 P101003 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption 2.4 Data Filtering The purpose of the data filtering is to identify and remove variables that are unlikely to be of use when modeling the data. No phenotype information are used in the filtering process, so the result can be used with any downstream analysis. This step is strongly recommended for untargeted metabolomics datasets (i.e. spectral binning data, peak lists) with large number of variables, many of them are from baseline noises. Filtering can usually improve the results. For details, please refer to the paper by Hackstadt, et al. Non-informative variables can be characterized in three groups: 1) variables of very small values (close to baseline or detection limit) - these variables can be detected using mean or median; 2) variables that are near-constant values throughout the experiment conditions (housekeeping or homeostasis) - these variables can be detected using standard deviation (SD); or the robust estimate such as interquantile range (IQR); and 3) variables that show low repeatability - this can be measured using QC samples using the relative standard deviation(RSD = SD/mean). Features with high percent RSD should be removed from the subsequent analysis (the suggested threshold is 20% for LC-MS and 30% for GC-MS). For data filtering based on the first two categories, the following empirical rules are applied during data filtering: Less than 250 variables: 5% will be filtered; Between 250 - 500 variables: 10% will be filtered; Between 500 - 1000 variables: 25% will be filtered; Over 1000 variables: 40% will be filtered; Filtering features if their RSDs are &gt; 25% in QC samples Interquantile range (IQR) Standard deviation (SD) Median absolute deviation (MAD) Relative standard deviation (RSD = SD/mean) Non-parametric relative standard deviation (MAD/median) Mean intensity value Median intensity value FilterFeature &lt;- function( object, qc_label, method = c(&quot;none&quot;, &quot;iqr&quot;, &quot;rsd&quot;, &quot;nrsd&quot;, &quot;mean&quot;, &quot;sd&quot;, &quot;mad&quot;, &quot;median&quot;), rsd_cutoff = 25) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) # QC samples qc_samples &lt;- metadata_tab %&gt;% data.frame() %&gt;% dplyr::filter(group == qc_label) if (dim(qc_samples)[1] == 0) { stop(&quot;No qc samples have been chosen, please check your input&quot;) } # QC samples&#39; feature table qc_feature &lt;- features_tab[, colnames(features_tab)%in%rownames(qc_samples)] %&gt;% t() # filter features by QC RSD rsd &lt;- rsd_cutoff / 100 sds &lt;- apply(qc_feature, 2, sd, na.rm = T) mns &lt;- apply(qc_feature, 2, mean, na.rm = T) rsd_vals &lt;- abs(sds/mns) %&gt;% na.omit() gd_inx &lt;- rsd_vals &lt; rsd int_mat &lt;- features_tab[gd_inx, ] message(&quot;Removed &quot;, (dim(qc_feature)[2] - dim(int_mat)[1]), &quot; features based on QC RSD values. QC samples are excluded from downstream functional analysis.&quot;) # whether to filter features by percentage according to the number PerformFeatureFilter &lt;- function(datMatrix, qc_method = method, remain_num = NULL) { dat &lt;- datMatrix feat_num &lt;- ncol(dat) feat_nms &lt;- colnames(dat) nm &lt;- NULL if (qc_method == &quot;none&quot; &amp;&amp; feat_num &lt; 5000) { # only allow for less than 4000 remain &lt;- rep(TRUE, feat_num) nm &lt;- &quot;No filtering was applied&quot; } else { if (qc_method == &quot;rsd&quot;){ sds &lt;- apply(dat, 2, sd, na.rm = T) mns &lt;- apply(dat, 2, mean, na.rm = T) filter_val &lt;- abs(sds/mns) nm &lt;- &quot;Relative standard deviation&quot; } else if (qc_method == &quot;nrsd&quot; ) { mads &lt;- apply(dat, 2, mad, na.rm = T) meds &lt;- apply(dat, 2, median, na.rm = T) filter_val &lt;- abs(mads/meds) nm &lt;- &quot;Non-paramatric relative standard deviation&quot; } else if (qc_method == &quot;mean&quot;) { filter_val &lt;- apply(dat, 2, mean, na.rm = T) nm &lt;- &quot;mean&quot; } else if (qc_method == &quot;sd&quot;) { filter_val &lt;- apply(dat, 2, sd, na.rm = T) nm &lt;- &quot;standard deviation&quot; } else if (qc_method == &quot;mad&quot;) { filter_val &lt;- apply(dat, 2, mad, na.rm = T) nm &lt;- &quot;Median absolute deviation&quot; } else if (qc_method == &quot;median&quot;) { filter_val &lt;- apply(dat, 2, median, na.rm = T) nm &lt;- &quot;median&quot; } else if (qc_method == &quot;iqr&quot;) { # iqr filter_val &lt;- apply(dat, 2, IQR, na.rm = T) nm &lt;- &quot;Interquantile Range&quot; } # get the rank of the filtered variables rk &lt;- rank(-filter_val, ties.method = &quot;random&quot;) if (is.null(remain_num)) { # apply empirical filtering based on data size if (feat_num &lt; 250) { # reduce 5% remain &lt;- rk &lt; feat_num * 0.95 message(&quot;Further feature filtering based on &quot;, nm) } else if (feat_num &lt; 500) { # reduce 10% remain &lt;- rk &lt; feat_num * 0.9 message(&quot;Further feature filtering based on &quot;, nm) } else if (feat_num &lt; 1000) { # reduce 25% remain &lt;- rk &lt; feat_num * 0.75 message(&quot;Further feature filtering based on &quot;, nm) } else { # reduce 40%, if still over 5000, then only use top 5000 remain &lt;- rk &lt; feat_num * 0.6 message(&quot;Further feature filtering based on &quot;, nm) } } else { remain &lt;- rk &lt; remain_num } } res &lt;- datMatrix[, remain] return(res) } feature_res &lt;- PerformFeatureFilter(t(int_mat)) # remove QC samples feature_final &lt;- feature_res[!rownames(feature_res) %in% rownames(qc_samples), ] # save int_mat into se object target &lt;- metadata_tab %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;SampleID&quot;) %&gt;% dplyr::filter(SampleID %in% rownames(feature_final)) res &lt;- PomaSummarizedExperiment(target = target, features = feature_final) return(res) } se_filter &lt;- FilterFeature(object = se, qc_label = &quot;None&quot;, method = &quot;iqr&quot;) ## Removed 149 features based on QC RSD values. QC samples are excluded from downstream functional analysis. ## Further feature filtering based on Interquantile Range se_filter ## class: SummarizedExperiment ## dim: 48 45 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(48): M_52603 M_19130 ... M_63681 M_63361 ## rowData names(0): ## colnames(45): P101001 P101004 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption 2.5 Missing Value Imputation se_impute &lt;- PomaImpute( se_filter, ZerosAsNA = TRUE, RemoveNA = TRUE, cutoff = 20, method = &quot;knn&quot;) se_impute ## class: SummarizedExperiment ## dim: 48 45 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(48): M_52603 M_19130 ... M_63681 M_63361 ## rowData names(0): ## colnames(45): P101001 P101004 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption 2.6 Data Normalization The normalization procedures are grouped into three categories. You can use one or combine them to achieve better results. Sample normalization is for general-purpose adjustment for systematic differences among samples; Sample-specific normalization (i.e. weight, volume) Normalization by sum Normalization by median Normalization by a reference sample (PQN) Normalization by a pooled sample from group (group PQN) Normalization by reference feature Quantile normalization (suggested only for &gt; 1000 features) Data transformation applies a mathematical transformation on individual values themselves. A simple mathematical approach is used to deal with negative values in log and square root. Log transformation (base 10) Square root transformation (square root of data values) Cube root transformation (cube root of data values) Data scaling adjusts each variable/feature by a scaling factor computed based on the dispersion of the variable. Mean centering (mean-centered only) Auto scaling (mean-centered and divided by the standard deviation of each variable) Pareto scaling (mean-centered and divided by the square root of the standard deviation of each variable) Range scaling (mean-centered and divided by the range of each variable) 2.6.1 Normalization by NormalizeData function NormalizeData &lt;- function( object, rowNorm = c(&quot;Quantile&quot;, &quot;GroupPQN&quot;, &quot;SamplePQN&quot;, &quot;CompNorm&quot;, &quot;SumNorm&quot;, &quot;MedianNorm&quot;, &quot;SpecNorm&quot;, &quot;None&quot;), transNorm = c(&quot;LogNorm&quot;, &quot;SrNorm&quot;, &quot;CrNorm&quot;, &quot;None&quot;), scaleNorm = c(&quot;MeanCenter&quot;, &quot;AutoNorm&quot;, &quot;ParetoNorm&quot;, &quot;RangeNorm&quot;, &quot;None&quot;), ref = NULL, SpeWeight = 1) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) data &lt;- t(features_tab) colNames &lt;- colnames(data) rowNames &lt;- rownames(data) ############################################# # Sample normalization # perform quantile normalization on the raw data (can be log transformed later by user) QuantileNormalize &lt;- function(data) { return(t(preprocessCore::normalize.quantiles(t(data), copy=FALSE))); } # normalize by a reference sample (probability quotient normalization) # ref should be the name of the reference sample ProbNorm &lt;- function(x, ref_smpl) { return(x/median(as.numeric(x/ref_smpl), na.rm = T)) } # normalize by a reference reference (i.e. creatinine) # ref should be the name of the cmpd CompNorm &lt;- function(x, ref) { return(1000*x/x[ref]) } SumNorm &lt;- function(x) { return(1000*x/sum(x, na.rm = T)) } # normalize by median MedianNorm &lt;- function(x) { return(x/median(x, na.rm = T)) } # row-wise normalization if (rowNorm == &quot;Quantile&quot;) { data &lt;- QuantileNormalize(data) # this can introduce constant variables if a variable is # at the same rank across all samples (replaced by its average across all) varCol &lt;- apply(data, 2, var, na.rm = T) constCol &lt;- (varCol == 0 | is.na(varCol)) constNum &lt;- sum(constCol, na.rm = T) if (constNum &gt; 0) { message(paste(&quot;After quantile normalization&quot;, constNum, &quot;features with a constant value were found and deleted.&quot;)) data &lt;- data[, !constCol, drop = FALSE] colNames &lt;- colnames(data) rowNames &lt;- rownames(data) } rownm &lt;- &quot;Quantile Normalization&quot; } else if (rowNorm == &quot;GroupPQN&quot;) { grp_inx &lt;- metadata_tab$group == ref ref.smpl &lt;- apply(data[grp_inx, , drop = FALSE], 2, mean) data &lt;- t(apply(data, 1, ProbNorm, ref.smpl)) rownm &lt;- &quot;Probabilistic Quotient Normalization by a reference group&quot; } else if (rowNorm == &quot;SamplePQN&quot;) { ref.smpl &lt;- data[ref, , drop = FALSE] data &lt;- t(apply(data, 1, ProbNorm, ref.smpl)) rownm &lt;- &quot;Probabilistic Quotient Normalization by a reference sample&quot; } else if (rowNorm == &quot;CompNorm&quot;) { data &lt;- t(apply(t(data), 1, CompNorm, ref)) rownm &lt;- &quot;Normalization by a reference feature&quot;; } else if (rowNorm == &quot;SumNorm&quot;) { data &lt;- t(apply(data, 1, SumNorm)) rownm &lt;- &quot;Normalization to constant sum&quot; } else if (rowNorm == &quot;MedianNorm&quot;) { data &lt;- t(apply(data, 1, MedianNorm)) rownm &lt;- &quot;Normalization to sample median&quot; } else if(rowNorm == &quot;SpecNorm&quot;) { norm.vec &lt;- rep(SpeWeight, nrow(data)) # default all same weight vec to prevent error data &lt;- data / norm.vec message(&quot;No sample specific information were given, all set to 1.0&quot;) rownm &lt;- &quot;Normalization by sample-specific factor&quot; } else { # nothing to do rownm &lt;- &quot;N/A&quot; } ################################################ # use apply will lose dimension info (i.e. row names and colnames) rownames(data) &lt;- rowNames colnames(data) &lt;- colNames # if the reference by feature, the feature column should be removed, since it is all 1 if(rowNorm == &quot;CompNorm&quot; &amp;&amp; !is.null(ref)){ inx &lt;- match(ref, colnames(data)) data &lt;- data[, -inx, drop=FALSE] colNames &lt;- colNames[-inx] } ############################################# # Data transformation # generalize log, tolerant to 0 and negative values LogNorm &lt;- function(x, min.val) { return(log10((x + sqrt(x^2 + min.val^2))/2)) } # square root, tolerant to negative values SquareRootNorm &lt;- function(x, min.val) { return(((x + sqrt(x^2 + min.val^2))/2)^(1/2)) } if (transNorm == &quot;LogNorm&quot;) { min.val &lt;- min(abs(data[data != 0]))/10 data &lt;- apply(data, 2, LogNorm, min.val) transnm &lt;- &quot;Log10 Normalization&quot; } else if (transNorm == &quot;SrNorm&quot;) { min.val &lt;- min(abs(data[data != 0]))/10 data &lt;- apply(data, 2, SquareRootNorm, min.val) transnm &lt;- &quot;Square Root Transformation&quot; } else if (transNorm == &quot;CrNorm&quot;) { norm.data &lt;- abs(data)^(1/3) norm.data[data &lt; 0] &lt;- -norm.data[data &lt; 0] data &lt;- norm.data transnm &lt;- &quot;Cubic Root Transformation&quot; } else { transnm &lt;- &quot;N/A&quot; } ############################################# ############################################# # Data scaling # normalize to zero mean and unit variance AutoNorm &lt;- function(x) { return((x - mean(x))/sd(x, na.rm = T)) } # normalize to zero mean but variance/SE ParetoNorm &lt;- function(x) { return((x - mean(x))/sqrt(sd(x, na.rm = T))) } # normalize to zero mean but variance/SE MeanCenter &lt;- function(x) { return(x - mean(x)) } # normalize to zero mean but variance/SE RangeNorm &lt;- function(x) { if (max(x) == min(x)) { return(x) } else { return((x - mean(x))/(max(x) - min(x))) } } if (scaleNorm == &quot;MeanCenter&quot;) { data &lt;- apply(data, 2, MeanCenter) scalenm &lt;- &quot;Mean Centering&quot; } else if (scaleNorm == &quot;AutoNorm&quot;) { data &lt;- apply(data, 2, AutoNorm) scalenm &lt;- &quot;Autoscaling&quot; } else if (scaleNorm == &quot;ParetoNorm&quot;) { data &lt;- apply(data, 2, ParetoNorm) scalenm &lt;- &quot;Pareto Scaling&quot; } else if (scaleNorm == &quot;RangeNorm&quot;) { data &lt;- apply(data, 2, RangeNorm) scalenm &lt;- &quot;Range Scaling&quot; } else { scalenm &lt;- &quot;N/A&quot; } ############################################# message(&quot;Row norm: &quot;, rownm, &quot;\\n&quot;, &quot;Data Transformation norm: &quot;, transnm, &quot;\\n&quot;, &quot;Data Scaling norm: &quot;, scalenm, &quot;\\n&quot;) # note after using &quot;apply&quot; function, all the attribute lost, need to add back rownames(data) &lt;- rowNames colnames(data) &lt;- colNames target &lt;- metadata_tab %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;SampleID&quot;) %&gt;% dplyr::filter(SampleID%in%rownames(data)) se &lt;- PomaSummarizedExperiment(target = target, features = data) # need to do some sanity check, for log there may be Inf values introduced res &lt;- CheckData(se) return(res) } se_normalize &lt;- NormalizeData( object = se_impute, rowNorm = &quot;None&quot;, transNorm = &quot;LogNorm&quot;, scaleNorm = &quot;ParetoNorm&quot;) ## Row norm: N/A ## Data Transformation norm: Log10 Normalization ## Data Scaling norm: Pareto Scaling ## All data values are numeric. ## A total of 0 (0%) missing values were detected. se_normalize ## class: SummarizedExperiment ## dim: 48 45 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(48): M_52603 M_19130 ... M_63681 M_63361 ## rowData names(0): ## colnames(45): P101001 P101004 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption 2.6.2 Normalization by POMA R package none &lt;- PomaNorm(se_impute, method = &quot;none&quot;) auto_scaling &lt;- PomaNorm(se_impute, method = &quot;auto_scaling&quot;) evel_scaling &lt;- PomaNorm(se_impute, method = &quot;level_scaling&quot;) log_scaling &lt;- PomaNorm(se_impute, method = &quot;log_scaling&quot;) log_transformation &lt;- PomaNorm(se_impute, method = &quot;log_transformation&quot;) vast_scaling &lt;- PomaNorm(se_impute, method = &quot;vast_scaling&quot;) se_normalize_v2 &lt;- PomaNorm(se_impute, method = &quot;log_pareto&quot;) se_normalize_v2 ## class: SummarizedExperiment ## dim: 48 45 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(48): M_52603 M_19130 ... M_63681 M_63361 ## rowData names(0): ## colnames(45): P101001 P101004 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption 2.6.3 Comparison of unnormalized and normalized dataset boxplot pl_unnor &lt;- PomaBoxplots(se_impute, group = &quot;samples&quot;, jitter = FALSE) + ggtitle(&quot;Not Normalized&quot;) + theme(legend.position = &quot;none&quot;) # data before normalization pl_nor &lt;- PomaBoxplots(se_normalize, group = &quot;samples&quot;, jitter = FALSE) + ggtitle(&quot;Normalized&quot;) # data after normalization cowplot::plot_grid(pl_unnor, pl_nor, ncol = 1, align = &quot;v&quot;) density pl_unnor &lt;- PomaDensity(se_impute, group = &quot;features&quot;) + ggtitle(&quot;Not Normalized&quot;) + theme(legend.position = &quot;none&quot;) # data before normalization pl_nor &lt;- PomaDensity(se_normalize, group = &quot;features&quot;) + ggtitle(&quot;Normalized&quot;) # data after normalization cowplot::plot_grid(pl_unnor, pl_nor, ncol = 1, align = &quot;v&quot;) 2.7 Removing outliers PomaOutliers(se_normalize, do = &quot;analyze&quot;)$polygon_plot # to explore se_processed &lt;- PomaOutliers(se_normalize, do = &quot;clean&quot;) # to remove outliers se_processed ## class: SummarizedExperiment ## dim: 48 43 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(48): M_52603 M_19130 ... M_63681 M_63361 ## rowData names(0): ## colnames(43): P101001 P101004 ... P101095 P101096 ## colData names(5): group Gender Smoker Age AlcoholConsumption 2.8 Saving datasets into RDS files if (!dir.exists(&quot;./dataset/POMA/&quot;)) { dir.create(&quot;./dataset/POMA/&quot;) } saveRDS(se_filter, &quot;./dataset/POMA/se_filter.RDS&quot;, compress = TRUE) saveRDS(se_impute, &quot;./dataset/POMA/se_impute.RDS&quot;, compress = TRUE) saveRDS(se_normalize, &quot;./dataset/POMA/se_normalize.RDS&quot;, compress = TRUE) saveRDS(se_processed, &quot;./dataset/POMA/se_processed.RDS&quot;, compress = TRUE) 2.9 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── References "],["cluster-analysis.html", "Chapter 3 Cluster Analysis 3.1 Loading packages 3.2 Importing data 3.3 Hierarchical Clustering 3.4 Partitional Clustering 3.5 Systematic Information", " Chapter 3 Cluster Analysis Hierarchical clustering is an alternative approach to k-means clustering for identifying groups in the dataset. It does not require us to pre-specify the number of clusters to be generated as is required by the k-means approach. Furthermore, hierarchical clustering has an added advantage over K-means clustering in that it results in an attractive tree-based representation of the observations, called a dendrogram. 3.1 Loading packages knitr::opts_chunk$set(warning = F) library(dplyr) library(tibble) library(POMA) library(ggplot2) library(SummarizedExperiment) library(cluster) # clustering algorithms library(factoextra) # clustering visualization library(dendextend) # for comparing two dendrograms # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 3.2 Importing data The input data sets are from the previous chapter. se_normalize &lt;- readRDS(&quot;./dataset/POMA/se_normalize.RDS&quot;) 3.3 Hierarchical Clustering Hierarchical clustering can be divided into two main types: agglomerative and divisive. Calculate dissimilarity However, a bigger question is: How do we measure the dissimilarity between two clusters of observations? A number of different cluster agglomeration methods (i.e, linkage methods) have been developed to answer to this question. The most common types methods are: Maximum or complete linkage clustering: It computes all pairwise dissimilarities between the elements in cluster 1 and the elements in cluster 2, and considers the largest value (i.e., maximum value) of these dissimilarities as the distance between the two clusters. It tends to produce more compact clusters. Minimum or single linkage clustering: It computes all pairwise dissimilarities between the elements in cluster 1 and the elements in cluster 2, and considers the smallest of these dissimilarities as a linkage criterion. It tends to produce long, “loose” clusters. Mean or average linkage clustering: It computes all pairwise dissimilarities between the elements in cluster 1 and the elements in cluster 2, and considers the average of these dissimilarities as the distance between the two clusters. Centroid linkage clustering: It computes the dissimilarity between the centroid for cluster 1 (a mean vector of length p variables) and the centroid for cluster 2. Ward’s minimum variance method: It minimizes the total within-cluster variance. At each step the pair of clusters with minimum between-cluster distance are merged. Data Processing: Rows are observations (individuals) and columns are variables. Any missing value in the data must be removed or estimated. The data must be standardized (i.e., scaled) to make variables comparable. Recall that, standardization consists of transforming the variables such that they have mean zero and standard deviation one. Functions to computing hierarchical clustering: hclust [in stats package] and agnes [in cluster package] for agglomerative hierarchical clustering. diana [in cluster package] for divisive hierarchical clustering. HieraCluster &lt;- function(object, method_dis = c(&quot;euclidean&quot;, &quot;bray&quot;), method_cluster = c(&quot;average&quot;, &quot;single&quot;, &quot;complete&quot;, &quot;ward&quot;, &quot;ward.D2&quot;), cluster_type = c(&quot;Agglomerative&quot;, &quot;Divisive&quot;), tree_num = 4) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) df &lt;- t(features_tab) if (cluster_type == &quot;Agglomerative&quot;) { # Agglomerative Hierarchical Clustering # Dissimilarity matrix d &lt;- dist(df, method = method_dis) # Hierarchical clustering using Linkage method hc &lt;- hclust(d, method = method_cluster) # hc &lt;- agnes(df, method = method_cluster) ####### identifying the strongest clustering structure ################ # # methods to assess # m &lt;- c( &quot;average&quot;, &quot;single&quot;, &quot;complete&quot;, &quot;ward&quot;) # names(m) &lt;- c( &quot;average&quot;, &quot;single&quot;, &quot;complete&quot;, &quot;ward&quot;) # # # function to compute coefficient # ac &lt;- function(x) { # agnes(df, method = x)$ac # } # # map_dbl(m, ac) } else if (cluster_type == &quot;Divisive&quot;) { # Divisive Hierarchical Clustering hc &lt;- diana(df, metric = method_dis) } hc_res &lt;- as.hclust(hc) sub_grp &lt;- cutree(hc_res, k = tree_num) plot(hc_res, cex = 0.6) rect.hclust(hc_res, k = tree_num, border = 2:(tree_num+1)) res &lt;- list(data=df, cluster=sub_grp, hc=hc_res) return(res) } 3.3.1 Agglomerative Hierarchical Clustering Agglomerative clustering: It’s also known as AGNES (Agglomerative Nesting). It works in a bottom-up manner. That is, each object is initially considered as a single-element cluster (leaf). At each step of the algorithm, the two clusters that are the most similar are combined into a new bigger cluster (nodes). This procedure is iterated until all points are member of just one single big cluster (root). The result is a tree which can be plotted as a dendrogram. Calculation Agg_hc_res &lt;- HieraCluster( object = se_normalize, method_dis = &quot;euclidean&quot;, method_cluster = &quot;ward.D2&quot;, cluster_type = &quot;Agglomerative&quot;) Visualization: visualize the result in a scatter plot fviz_cluster(list(data = Agg_hc_res$data, cluster = Agg_hc_res$cluster)) 3.3.2 Divisive Hierarchical Clustering Divisive hierarchical clustering: It’s also known as DIANA (Divise Analysis) and it works in a top-down manner. The algorithm is an inverse order of AGNES. It begins with the root, in which all objects are included in a single cluster. At each step of iteration, the most heterogeneous cluster is divided into two. The process is iterated until all objects are in their own cluster. Calculation Div_hc_res &lt;- HieraCluster( object = se_normalize, method_dis = &quot;euclidean&quot;, method_cluster = &quot;ward&quot;, cluster_type = &quot;Divisive&quot;) Visualization: visualize the result in a scatter plot fviz_cluster(list(data = Div_hc_res$data, cluster = Div_hc_res$cluster)) 3.3.3 Comparison dendrograms: In the dendrogram displayed above, each leaf corresponds to one observation. Agg_hc_dend &lt;- as.dendrogram(Agg_hc_res$hc) Div_hc_dend &lt;- as.dendrogram(Div_hc_res$hc) tanglegram(Agg_hc_dend, Div_hc_dend) tanglegrams dend_list &lt;- dendlist(Agg_hc_dend, Div_hc_dend) tanglegram(Agg_hc_dend, Div_hc_dend, highlight_distinct_edges = FALSE, # Turn-off dashed lines common_subtrees_color_lines = FALSE, # Turn-off line colors common_subtrees_color_branches = TRUE, # Color common branches main = paste(&quot;entanglement =&quot;, round(entanglement(dend_list), 2))) 3.3.4 Determining Optimal Clusters Elbow plot fviz_nbclust(Agg_hc_res$data, FUN = hcut, method = &quot;wss&quot;) Average Silhouette Method fviz_nbclust(Agg_hc_res$data, FUN = hcut, method = &quot;silhouette&quot;) Gap Statistic Method gap_stat &lt;- clusGap(Agg_hc_res$data, FUN = hcut, nstart = 25, K.max = 10, B = 50) ## Clustering k = 1,2,..., K.max (= 10): .. done ## Bootstrapping, b = 1,2,..., B (= 50) [one &quot;.&quot; per sample]: ## .................................................. 50 fviz_gap_stat(gap_stat) 3.4 Partitional Clustering K-means clustering is the most commonly used unsupervised machine learning algorithm for partitioning a given data set into a set of k groups (i.e. k clusters), where k represents the number of groups pre-specified by the analyst. PartCluster &lt;- function(object, cluster_num = 4) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) df &lt;- t(features_tab) res &lt;- kmeans(df, centers = cluster_num) # show clusters print(fviz_cluster(list(data = df, cluster = res$cluster))) return(res) } Kcluster_res &lt;- PartCluster( object = se_normalize, cluster_num = 4) 3.5 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── "],["chemometrics-analysis.html", "Chapter 4 Chemometrics Analysis 4.1 Loading packages 4.2 Importing data 4.3 Principal Component Analysis (PCA) 4.4 Partial Least Squares-Discriminant Analysis (PLS-DA) 4.5 Sparse Partial Least Squares-Discriminant Analysis (sPLS-DA) 4.6 Orthogonal Partial Least Squares-Discriminant Analysis (orthoPLS-DA) 4.7 Systematic Information", " Chapter 4 Chemometrics Analysis The functions for Chemometrics Analysis in POMA (Castellano-Escuder et al. 2021) implemented from mixOmics (Rohart et al. 2017). 4.1 Loading packages knitr::opts_chunk$set(warning = F, message = F) library(dplyr) library(tibble) library(POMA) library(ggplot2) library(ggraph) library(plotly) library(SummarizedExperiment) # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 4.2 Importing data The input data sets are from the previous chapter. se_processed &lt;- readRDS(&quot;./dataset/POMA/se_processed.RDS&quot;) 4.3 Principal Component Analysis (PCA) The aim of PCA (Jolliffe 2005) is to reduce the dimensionality of the data whilst retaining as much information as possible. ‘Information’ is referred here as variance. The idea is to create uncorrelated artificial variables called principal components (PCs) that combine in a linear manner the original (possibly correlated) variables. poma_pca &lt;- PomaMultivariate(se_processed, method = &quot;pca&quot;) poma_pca$scoresplot + ggtitle(&quot;Scores Plot (pca)&quot;) 4.4 Partial Least Squares-Discriminant Analysis (PLS-DA) Partial Least Squares (PLS) regression is a multivariate methodology which relates two data matrices X (e.g. transcriptomics) and Y (e.g. lipids). PLS goes beyond traditional multiple regression by modelling the structure of both matrices. Unlike traditional multiple regression models, it is not limited to uncorrelated variables. One of the many advantages of PLS is that it can handle many noisy, collinear (correlated) and missing variables and can also simultaneously model several response variables in Y. Calculation poma_plsda &lt;- PomaMultivariate(se_processed, method = &quot;plsda&quot;) scatter plot poma_plsda$scoresplot + ggtitle(&quot;Scores Plot (plsda)&quot;) errors plot poma_plsda$errors_plsda_plot + ggtitle(&quot;Error Plot (plsda)&quot;) 4.5 Sparse Partial Least Squares-Discriminant Analysis (sPLS-DA) Even though PLS is highly efficient in a high dimensional context, the interpretability of PLS needed to be improved. sPLS has been recently developed by our team to perform simultaneous variable selection in both data sets X and Y data sets, by including LASSO penalizations in PLS on each pair of loading vectors Calculation poma_splsda &lt;- PomaMultivariate(se_processed, method = &quot;splsda&quot;) scatter plot poma_splsda$scoresplot + ggtitle(&quot;Scores Plot (splsda)&quot;) 4.6 Orthogonal Partial Least Squares-Discriminant Analysis (orthoPLS-DA) 4.7 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── References "],["univariate-analysis.html", "Chapter 5 Univariate Analysis 5.1 Loading packages 5.2 Importing data 5.3 Fold Change Analysis 5.4 T Test 5.5 Wilcoxon Test 5.6 Limma Test 5.7 Volcano plot 5.8 Correlation Heatmaps 5.9 glasso: this function will compute a Gaussian Graphical Model using the glmnet package 5.10 Systematic Information", " Chapter 5 Univariate Analysis Univariate analysis explores each variable in a data set, separately and it uses traditional statistical methods on single variable to calculate the statistics, such as fold change, p-value, etc. 5.1 Loading packages knitr::opts_chunk$set(warning = F) library(dplyr) library(tibble) library(POMA) library(ggplot2) library(ggraph) library(plotly) library(SummarizedExperiment) # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 5.2 Importing data The input data sets are from the previous chapter. se_impute &lt;- readRDS(&quot;./dataset/POMA/se_impute.RDS&quot;) se_normalize &lt;- readRDS(&quot;./dataset/POMA/se_normalize.RDS&quot;) se_processed &lt;- readRDS(&quot;./dataset/POMA/se_processed.RDS&quot;) 5.3 Fold Change Analysis FoldChange &lt;- function(object, group_names, fc_cutoff = 2, cmp_type = 0, paired = FALSE) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) metadata &lt;- metadata_tab %&gt;% data.frame() %&gt;% dplyr::filter(group %in% group_names) profile &lt;- features_tab[, pmatch(rownames(metadata), colnames(features_tab))] # make sure threshold is above 1 fc_cutoff &lt;- ifelse(fc_cutoff &gt; 1, fc_cutoff, 1/fc_cutoff) max_cutoff &lt;- fc_cutoff min_cutoff &lt;- 1 / fc_cutoff GetFC &lt;- function(x, y, cmpType, paired = FALSE) { # x = profile # y = metadata # cmpType = cmp_type # paired = paired x &lt;- t(x) colNames &lt;- colnames(x) rowNames &lt;- rownames(x) if (paired) { # compute the average of paired FC (unit is pair) G1 &lt;- x[which(y$group == group_names[1]), ] G2 &lt;- x[which(y$group == group_names[2]), ] if (cmpType == 0) { fc.mat &lt;- G1 - G2 } else { fc.mat &lt;- G2 - G1 } fc.log &lt;- apply(fc.mat, 2, mean) fc.all &lt;- signif(2^fc.log, 5) } else { m1 &lt;- colMeans(x[which(y$group == group_names[1]), ]) m2 &lt;- colMeans(x[which(y$group == group_names[2]), ]) # create a named matrix of sig vars for display if (cmpType == 0) { ratio &lt;- m1/m2 } else { ratio &lt;- m2/m1 } fc.all &lt;- signif(ratio, 5) ratio[ratio &lt; 0] &lt;- 0 fc.log &lt;- signif(log2(ratio), 5) fc.log[is.infinite(fc.log) &amp; fc.log &lt; 0] &lt;- -99 fc.log[is.infinite(fc.log) &amp; fc.log &gt; 0] &lt;- 99 } names(fc.all) &lt;- names(fc.log) &lt;- colnames(x) res &lt;- list(fc.all = fc.all, fc.log = fc.log) return(res) } res &lt;- GetFC(profile, metadata, cmp_type, paired) fc.all &lt;- res$fc.all fc.log &lt;- res$fc.log inx.up &lt;- fc.all &gt; max_cutoff inx.down &lt;- fc.all &lt; min_cutoff names(inx.up) &lt;- names(inx.down) &lt;- names(fc.all) imp.inx &lt;- inx.up | inx.down sig.mat &lt;- cbind(fc.all[imp.inx, drop = F], fc.log[imp.inx, drop = F]) colnames(sig.mat) &lt;- c(&quot;Fold Change&quot;, &quot;log2(FC)&quot;) # order by absolute log value (since symmetrical in pos and neg) inx.ord &lt;- order(abs(sig.mat[, 2]), decreasing = T) sig.mat &lt;- sig.mat[inx.ord, , drop = F] return(sig.mat) } FC_res &lt;- FoldChange( object = se_normalize, fc_cutoff = 2, group_names = c(&quot;Mild&quot;, &quot;Moderate&quot;), cmp_type = 0, paired = FALSE) head(FC_res) ## Fold Change log2(FC) ## M_52603 -0.43650 -99 ## M_39270 -0.28201 -99 ## M_35186 -1.17830 -99 ## M_34214 -1.03940 -99 ## M_49617 -4.72130 -99 ## M_53189 -0.97524 -99 5.4 T Test group_names &lt;- c(&quot;Mild&quot;, &quot;Severe&quot;) se_processed_subset &lt;- se_processed[, se_processed$group %in% group_names] se_processed_subset$group &lt;- factor(as.character(se_processed_subset$group)) ttest_res &lt;- PomaUnivariate(se_processed_subset, method = &quot;ttest&quot;) head(ttest_res) ## # A tibble: 6 × 9 ## feature FC diff_means pvalue pvalueAdj mean_Mild mean_Severe sd_Mild sd_Severe ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 M_52603 3.93 0.069 0.604 0.745 0.0236 0.0926 0.238 0.360 ## 2 M_19130 2.94 0.015 0.854 0.891 0.00797 0.0234 0.269 0.130 ## 3 M_39270 -0.297 0.023 0.880 0.898 -0.0177 0.00526 0.460 0.272 ## 4 M_35186 -0.656 0.086 0.510 0.745 -0.0518 0.0340 0.328 0.294 ## 5 M_34214 -0.232 0.144 0.329 0.636 -0.117 0.0271 0.466 0.229 ## 6 M_49617 0.064 -0.128 0.218 0.636 0.137 0.00881 0.249 0.240 5.5 Wilcoxon Test wilcox_res &lt;- PomaUnivariate(se_processed_subset, method = &quot;mann&quot;) head(wilcox_res) ## # A tibble: 6 × 9 ## feature FC diff_means pvalue pvalueAdj mean_Mild mean_Severe sd_Mild sd_Severe ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 M_52603 3.93 0.069 0.709 0.830 0.0236 0.0926 0.238 0.360 ## 2 M_19130 2.94 0.015 0.931 0.951 0.00797 0.0234 0.269 0.130 ## 3 M_39270 -0.297 0.023 0.752 0.840 -0.0177 0.00526 0.460 0.272 ## 4 M_35186 -0.656 0.086 0.546 0.748 -0.0518 0.0340 0.328 0.294 ## 5 M_34214 -0.232 0.144 0.472 0.730 -0.117 0.0271 0.466 0.229 ## 6 M_49617 0.064 -0.128 0.138 0.600 0.137 0.00881 0.249 0.240 5.6 Limma Test Limma_res &lt;- PomaLimma(se_processed_subset, contrast = paste(group_names, collapse = &quot;-&quot;), adjust = &quot;fdr&quot;) head(Limma_res) ## # A tibble: 6 × 7 ## feature logFC AveExpr t P.Value adj.P.Val B ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 M_52464 -0.419 -0.0672 -2.94 0.00584 0.278 -2.26 ## 2 M_52447 -0.369 -0.0657 -2.67 0.0116 0.278 -2.77 ## 3 M_55041 -0.320 -0.0764 -2.23 0.0326 0.505 -3.52 ## 4 M_35631 -0.269 -0.0382 -2.05 0.0477 0.505 -3.79 ## 5 M_57663 -0.261 0.0104 -2.01 0.0526 0.505 -3.86 ## 6 M_54885 -0.265 0.00557 -1.77 0.0853 0.655 -4.20 5.7 Volcano plot se_impute_subset &lt;- se_impute[, se_impute$group %in% group_names] se_impute_subset$group &lt;- factor(as.character(se_impute_subset$group)) PomaVolcano(se_impute_subset, pval = &quot;raw&quot;, pval_cutoff = 0.1, log2FC = 0.2, xlim = 1, labels = TRUE, plot_title = TRUE) 5.8 Correlation Heatmaps poma_cor &lt;- PomaCorr(se_processed_subset, label_size = 8, coeff = 0.6) poma_cor$correlations ## # A tibble: 1,128 × 5 ## feature1 feature2 R pvalue FDR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 M_52464 M_52447 0.933 3.15e-11 0.0000000356 ## 2 M_55041 M_52464 0.911 6.07e-10 0.000000252 ## 3 M_33955 M_33961 0.910 6.71e-10 0.000000252 ## 4 M_55041 M_52447 0.905 1.20e- 9 0.000000337 ## 5 M_33961 M_42398 0.901 2.04e- 9 0.000000460 ## 6 M_33955 M_42398 0.898 2.72e- 9 0.000000511 ## 7 M_52461 M_52438 0.887 7.73e- 9 0.00000116 ## 8 M_33955 M_35253 0.886 8.19e- 9 0.00000116 ## 9 M_33230 M_47118 0.884 9.95e- 9 0.00000125 ## 10 M_33961 M_35253 0.881 1.28e- 8 0.00000144 ## # … with 1,118 more rows correlation plot poma_cor$corrplot Network poma_cor$graph 5.9 glasso: this function will compute a Gaussian Graphical Model using the glmnet package PomaCorr(se_processed_subset, corr_type = &quot;glasso&quot;, coeff = 0.6)$graph 5.10 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── "],["multivariate-analysis.html", "Chapter 6 Multivariate analysis 6.1 Loading packages 6.2 Importing data 6.3 Data curation 6.4 Regularized Generalized Linear Models 6.5 Classification 6.6 Systematic Information", " Chapter 6 Multivariate analysis Comparing to univariate analysis, multivariate analysis is defined as a process of involving multiple dependent variables resulting in one outcome for feature selection. Here, we use Regularized Generalized Linear Models and Random forest model to identify the biomarkers associated with Outcomes. Lasso, Ridge and Elasticnet Regularized Generalized Linear Models for Binary Outcomes Random forest model to select the important features 6.1 Loading packages knitr::opts_chunk$set(warning = F) library(dplyr) library(tibble) library(POMA) library(ggplot2) library(ggraph) library(plotly) library(SummarizedExperiment) library(glmnet) # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 6.2 Importing data The input data sets are from the previous chapter. se_processed &lt;- readRDS(&quot;./dataset/POMA/se_processed.RDS&quot;) 6.3 Data curation group_names &lt;- c(&quot;Mild&quot;, &quot;Severe&quot;) se_processed_subset &lt;- se_processed[, se_processed$group %in% group_names] se_processed_subset$group &lt;- factor(as.character(se_processed_subset$group)) 6.4 Regularized Generalized Linear Models 6.4.1 Lasso: alpha = 1 lasso_res &lt;- PomaLasso(se_processed_subset, alpha = 1, labels = TRUE) cowplot::plot_grid(lasso_res$cvLassoPlot, lasso_res$coefficientPlot, ncol = 2, align = &quot;hv&quot;) lasso_res$coefficients ## # A tibble: 2 × 2 ## feature coefficient ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) -0.292 ## 2 M_52464 0.762 6.4.2 Ridge: alpha = 0 ridge_res &lt;- PomaLasso(se_processed_subset, alpha = 0, labels = TRUE) cowplot::plot_grid(ridge_res$cvLassoPlot, ridge_res$coefficientPlot, ncol = 2, align = &quot;hv&quot;) ridge_res$coefficients ## # A tibble: 49 × 2 ## feature coefficient ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) -0.269 ## 2 M_52603 0.0416 ## 3 M_19130 -0.0311 ## 4 M_39270 -0.0294 ## 5 M_35186 0.0101 ## 6 M_34214 0.0329 ## 7 M_49617 -0.214 ## 8 M_52710 -0.186 ## 9 M_53189 0.00193 ## 10 M_34419 0.0266 ## # … with 39 more rows 6.4.3 Elasticnet: 0 &lt; alpha &lt; 1 elastic_res &lt;- PomaLasso(se_processed_subset, alpha = 0.4, labels = TRUE) cowplot::plot_grid(elastic_res$cvLassoPlot, elastic_res$coefficientPlot, ncol = 2, align = &quot;hv&quot;) elastic_res$coefficients ## # A tibble: 3 × 2 ## feature coefficient ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) -0.305 ## 2 M_52464 0.319 ## 3 M_52447 0.199 6.5 Classification 6.5.1 Random Forest Calculation poma_rf &lt;- PomaRandForest(se_processed_subset, ntest = 10, nvar = 10) poma_rf$error_tree table poma_rf$confusionMatrix$table ## Reference ## Prediction 1 2 ## 1 1 0 ## 2 0 1 Important features poma_rf$MeanDecreaseGini_plot 6.5.2 Support Vector Machine (SVM) 6.6 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── "],["network-analysis.html", "Chapter 7 Network Analysis 7.1 Introduction 7.2 Loading packages 7.3 Importing data 7.4 Data curation 7.5 Associations Among Features 7.6 Network comparison 7.7 Systematic Information", " Chapter 7 Network Analysis 7.1 Introduction Estimating microbial association networks from high-throughput sequencing data is a common exploratory data analysis approach aiming at understanding the complex interplay of microbial communities in their natural habitat. Statistical network estimation workflows comprise several analysis steps, including methods for zero handling, data normalization and computing microbial associations. Since microbial interactions are likely to change between conditions, e.g. between healthy individuals and patients, identifying network differences between groups is often an integral secondary analysis step. NetCoMi (Network Construction and Comparison for Microbiome Data) (Peschel et al. 2021) provides functionality for constructing, analyzing, and comparing networks suitable for the application on microbial compositional data. The following information is from NetCoMi github. Association measures: Pearson coefficient (cor() from stats package) Spearman coefficient (cor() from stats package) Biweight Midcorrelation bicor() from WGCNA package Methods for zero replacement: Adding a predefined pseudo count Multiplicative replacement (multRepl from zCompositions package) Modified EM alr-algorithm (lrEM from zCompositions package) Bayesian-multiplicative replacement (cmultRepl from zCompositions package) Normalization methods: Total Sum Scaling (TSS) (own implementation) Cumulative Sum Scaling (CSS) (cumNormMat from metagenomeSeq package) Common Sum Scaling (COM) (own implementation) Rarefying (rrarefy from vegan package) Variance Stabilizing Transformation (VST) (varianceStabilizingTransformation from DESeq2 package) Centered log-ratio (clr) transformation (clr() from SpiecEasi package)) TSS, CSS, COM, VST, and the clr transformation are described in [Badri et al., 2020]. 7.2 Loading packages knitr::opts_chunk$set(warning = F) library(dplyr) library(tibble) library(POMA) library(ggplot2) library(ggraph) library(plotly) library(SummarizedExperiment) # installing package # devtools::install_github(&quot;stefpeschel/NetCoMi&quot;, # dependencies = c(&quot;Depends&quot;, &quot;Imports&quot;, &quot;LinkingTo&quot;), # repos = c(&quot;https://cloud.r-project.org/&quot;, # BiocManager::repositories())) # devtools::install_github(&quot;GraceYoon/SPRING&quot;, force = TRUE) # devtools::install_github(&quot;zdk123/SpiecEasi&quot;, force = TRUE) library(NetCoMi) library(SPRING) library(SpiecEasi) # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 7.3 Importing data The input data sets are from the previous chapter. se_filter &lt;- readRDS(&quot;./dataset/POMA/se_filter.RDS&quot;) 7.4 Data curation features_tab &lt;- SummarizedExperiment::assay(se_filter) %&gt;% t() features_tab[is.na(features_tab)] &lt;- 0 head(features_tab) ## M_52603 M_19130 M_39270 M_35186 M_34214 M_49617 M_52710 M_53189 M_34419 ## P101001 94392176 25632184 959249.2 8141286 8284910 381540.1 47739292 392911.0 306346432 ## P101004 115155104 25106562 785895.0 4303854 7923489 588488.2 43678784 300383.9 263333424 ## P101007 79582632 31371314 1903592.4 7129884 9211485 464548.8 53975068 539361.5 191261648 ## P101009 118408760 27787270 863701.9 5394354 8559147 497342.0 47619564 487186.2 232171184 ## P101010 92508664 26685844 1177860.8 6270727 7623603 457409.1 61906028 236719.5 183104336 ## P101011 94076424 27780988 638271.3 4292087 6074633 238781.8 40534280 279118.7 164623888 ## M_36600 M_54885 M_32350 M_55041 M_48258 M_35628 M_33230 M_52462 M_52464 ## P101001 9887348 298886.1 627613.7 3655240 181136336 6548460 19098412 486910976 6794782 ## P101004 9703074 356274.3 339586.8 1637351 115752200 3455001 10641834 380887616 4090405 ## P101007 6431966 393623.0 662555.6 7284474 102036920 3640571 14977371 515795264 13183206 ## P101009 11914472 599783.6 492430.9 3065707 118663320 5087503 13575508 390977568 7596680 ## P101010 9366287 280123.8 373484.2 2493687 154183360 5244878 19464998 478479936 5395172 ## P101011 6003700 349482.3 608671.7 2653816 76137216 2238570 8797510 420938976 4854076 ## M_52454 M_52610 M_42446 M_52461 M_52616 M_33955 M_35631 M_42450 M_52447 ## P101001 274026048 206279104 712253440 486655872 12365879 448634784 4035864 358896736 30252208 ## P101004 282066016 253920496 807180352 439253152 10655923 413690720 3446139 282910752 19424238 ## P101007 309709728 316142400 715500800 448578400 14010174 368849632 3764448 404918560 57376512 ## P101009 325723168 232534688 742576768 473622240 14814230 365712768 3444159 298822048 26429340 ## P101010 382690720 262177072 642967424 647036736 12873290 376101984 3276579 373251712 21732290 ## P101011 261022832 264648720 728199680 378921056 13152187 348108832 2364665 335196864 21960100 ## M_52449 M_52452 M_52438 M_33961 M_42398 M_47403 M_57547 M_19266 M_63739 ## P101001 43173148 510461472 181406848 191147264 6137137 209255.5 169297.7 176944.80 761146.2 ## P101004 30030992 573170816 122556968 166379712 5143481 220424.3 426227.5 0.00 549097.4 ## P101007 50766284 588643712 181572112 189915296 7412535 369675.0 561078.5 385203.22 792883.2 ## P101009 43420376 631965888 208484000 186599152 5421984 172995.7 457043.3 0.00 727360.0 ## P101010 43622724 590247424 306379392 217632736 5767624 168503.4 602024.4 0.00 913964.4 ## P101011 39447380 560182336 136970272 170865408 3588338 375137.6 304329.9 90888.59 1609550.0 ## M_57663 M_42489 M_37253 M_45095 M_53229 M_55072 M_47118 M_35253 M_46115 ## P101001 719237.9 2865827 411578.0 751527.3 768160.4 488544.9 281162.7 27446600 1578011.4 ## P101004 364556.1 1546570 425030.0 378033.7 953194.9 653107.0 362380.0 28088842 440408.7 ## P101007 500680.8 1403190 742298.0 589506.3 1619436.8 522721.5 482046.2 21613430 794592.2 ## P101009 523549.1 1653830 466825.0 503910.2 877530.2 873616.8 619943.9 28872470 671497.6 ## P101010 455201.1 1007203 232876.0 489013.9 993923.4 864624.8 677774.7 25375946 1133763.9 ## P101011 449288.0 1818438 651777.4 785751.6 1092817.9 1360312.8 208040.6 17388928 1635119.5 ## M_62952 M_63681 M_63361 ## P101001 5104806 434480.3 2540280 ## P101004 3084011 373229.5 2165454 ## P101007 4728273 400386.6 2231037 ## P101009 4140767 301840.8 0 ## P101010 2434359 548330.4 1125607 ## P101011 5722723 344799.8 0 7.5 Associations Among Features 7.5.1 Single network with Pearson correlation as association measure Since Pearson correlations may lead to compositional effects when applied to sequencing data, we use the clr transformation as normalization method. Zero treatment is necessary in this case. InputData: numeric matrix. Can be a count matrix (rows are samples, columns are Features). Method to compute the associations between features (argument measure). Normalization method: normMethod: clr zeroMethod: multRepl sparsMethod: threshold A threshold of 0.3 is used as sparsification method, so that only OTUs with an absolute correlation greater than or equal to 0.3 are connected. 7.5.1.1 Building network model net_single &lt;- netConstruct(features_tab, measure = &quot;pearson&quot;, normMethod = &quot;clr&quot;, zeroMethod = &quot;multRepl&quot;, sparsMethod = &quot;threshold&quot;, thresh = 0.3, verbose = 3, seed = 123) 7.5.1.2 Visualizing the network primary plot props_single &lt;- netAnalyze(net_single, clustMethod = &quot;cluster_fast_greedy&quot;) plot(props_single, nodeColor = &quot;cluster&quot;, nodeSize = &quot;eigenvector&quot;, title1 = &quot;Network on metabolomics with Pearson correlations&quot;, showTitle = TRUE, cexTitle = 1.5) legend(0.7, 1.1, cex = 1, title = &quot;estimated correlation:&quot;, legend = c(&quot;+&quot;,&quot;-&quot;), lty = 1, lwd = 3, col = c(&quot;#009900&quot;,&quot;red&quot;), bty = &quot;n&quot;, horiz = TRUE) improve the visualization by changing the following arguments: repulsion = 0.8: Place the nodes further apart rmSingles = TRUE: Single nodes are removed labelScale = FALSE and cexLabels = 1.6: All labels have equal size and are enlarged to improve readability of small node’s labels nodeSizeSpread = 3 (default is 4): Node sizes are more similar if the value is decreased. This argument (in combination with cexNodes) is useful to enlarge small nodes while keeping the size of big nodes. plot(props_single, nodeColor = &quot;cluster&quot;, nodeSize = &quot;eigenvector&quot;, repulsion = 0.8, rmSingles = TRUE, labelScale = FALSE, cexLabels = 1.6, nodeSizeSpread = 3, cexNodes = 2, title1 = &quot;Network on metabolomics with Pearson correlations&quot;, showTitle = TRUE, cexTitle = 1.5) legend(0.7, 1.1, cex = 1.2, title = &quot;estimated correlation:&quot;, legend = c(&quot;+&quot;,&quot;-&quot;), lty = 1, lwd = 3, col = c(&quot;#009900&quot;,&quot;red&quot;), bty = &quot;n&quot;, horiz = TRUE) 7.5.2 Single network with spearman correlation as association measure 7.5.2.1 Building network model net_single2 &lt;- netConstruct(features_tab, measure = &quot;spearman&quot;, normMethod = &quot;clr&quot;, zeroMethod = &quot;multRepl&quot;, sparsMethod = &quot;threshold&quot;, thresh = 0.3, verbose = 3, seed = 123) 7.5.2.2 Visualizing the network props_single2 &lt;- netAnalyze(net_single2, clustMethod = &quot;cluster_fast_greedy&quot;) plot(props_single2, nodeColor = &quot;cluster&quot;, nodeSize = &quot;eigenvector&quot;, repulsion = 0.8, rmSingles = TRUE, labelScale = FALSE, cexLabels = 1.6, nodeSizeSpread = 3, cexNodes = 2, title1 = &quot;Network on metabolomics with Spearman correlations&quot;, showTitle = TRUE, cexTitle = 1.5) legend(0.7, 1.1, cex = 1.2, title = &quot;estimated correlation:&quot;, legend = c(&quot;+&quot;,&quot;-&quot;), lty = 1, lwd = 3, col = c(&quot;#009900&quot;,&quot;red&quot;), bty = &quot;n&quot;, horiz = TRUE) 7.5.3 Single network with WGCNA (bicor) as association measure Biweight Midcorrelation bicor() from WGCNA package. 7.5.3.1 Building network model net_single3 &lt;- netConstruct(features_tab, measure = &quot;bicor&quot;, measurePar = list(use = &quot;all.obs&quot;, maxPOutliers = 1, nThreads = 2), filtTax = &quot;highestVar&quot;, filtTaxPar = list(highestVar = 50), filtSamp = &quot;totalReads&quot;, filtSampPar = list(totalReads = 100), dissFunc = &quot;TOMdiss&quot;, verbose = 3) ## ..will use 2 parallel threads. ## Fraction of slow calculations: 0.000000 7.5.3.2 Visualizing the network props_single3 &lt;- netAnalyze(net_single3, clustMethod = &quot;cluster_fast_greedy&quot;) plot(props_single3, nodeColor = &quot;cluster&quot;, nodeSize = &quot;eigenvector&quot;, repulsion = 0.8, rmSingles = TRUE, labelScale = FALSE, cexLabels = 1.6, nodeSizeSpread = 3, cexNodes = 2, title1 = &quot;Network on metabolomics with WGCNA correlations&quot;, showTitle = TRUE, cexTitle = 1.5) legend(0.7, 1.1, cex = 1.2, title = &quot;estimated correlation:&quot;, legend = c(&quot;+&quot;,&quot;-&quot;), lty = 1, lwd = 3, col = c(&quot;#009900&quot;,&quot;red&quot;), bty = &quot;n&quot;, horiz = TRUE) 7.6 Network comparison Comparing two networks by NetCoMi. 7.6.1 Data preparing group_names &lt;- c(&quot;Mild&quot;, &quot;Severe&quot;) se_filter_subset &lt;- se_filter[, se_filter$group %in% group_names] se_filter_subset$group &lt;- factor(as.character(se_filter_subset$group)) features_tab &lt;- SummarizedExperiment::assay(se_filter_subset) %&gt;% t() features_tab[is.na(features_tab)] &lt;- 0 group_vector &lt;- se_filter_subset$group 7.6.2 Building network model net_group &lt;- netConstruct(features_tab, group = group_vector, measure = &quot;pearson&quot;, normMethod = &quot;clr&quot;, zeroMethod = &quot;multRepl&quot;, sparsMethod = &quot;threshold&quot;, thresh = 0.3, verbose = 3, seed = 123) 7.6.3 Network analysis props_group &lt;- netAnalyze(net_group, centrLCC = FALSE, avDissIgnoreInf = TRUE, sPathNorm = FALSE, clustMethod = &quot;cluster_fast_greedy&quot;, hubPar = c(&quot;degree&quot;, &quot;between&quot;, &quot;closeness&quot;), hubQuant = 0.9, lnormFit = TRUE, normDeg = FALSE, normBetw = FALSE, normClose = FALSE, normEigen = FALSE) summary(props_group) ## ## Component sizes ## ``````````````` ## Group 1: ## size: 48 ## #: 1 ## ## Group 2: ## size: 48 ## #: 1 ## ______________________________ ## Global network properties ## ````````````````````````` ## group &#39;1&#39; group &#39;2&#39; ## Number of components 1.00000 1.00000 ## Clustering coefficient 0.50151 0.48747 ## Modularity 0.15580 0.08807 ## Positive edge percentage 51.11607 49.24078 ## Edge density 0.39716 0.40869 ## Natural connectivity 0.09563 0.08721 ## Vertex connectivity 9.00000 7.00000 ## Edge connectivity 9.00000 7.00000 ## Average dissimilarity* 0.67288 0.68152 ## Average path length** 0.92286 0.91581 ## ## *Dissimilarity = 1 - edge weight ## **Path length: Sum of dissimilarities along the path ## ## ______________________________ ## Clusters ## - In the whole network ## - Algorithm: cluster_fast_greedy ## ```````````````````````````````` ## group &#39;1&#39;: ## name: 1 2 3 4 ## #: 6 15 14 13 ## ## group &#39;2&#39;: ## name: 1 2 3 4 ## #: 18 10 12 8 ## ## ______________________________ ## Hubs ## - In alphabetical/numerical order ## - Based on log-normal quantiles of centralities ## ``````````````````````````````````````````````` ## No hubs detected. ## ______________________________ ## Centrality measures ## - In decreasing order ## - Computed for the complete network ## ```````````````````````````````````` ## Degree (unnormalized): ## group &#39;1&#39; group &#39;2&#39; ## M_48258 29 19 ## M_42398 26 25 ## M_47118 26 27 ## M_35186 25 22 ## M_55072 24 21 ## ______ ______ ## M_47118 26 27 ## M_19130 14 26 ## M_42446 18 26 ## M_33230 22 25 ## M_52452 23 25 ## ## Betweenness centrality (unnormalized): ## group &#39;1&#39; group &#39;2&#39; ## M_35186 51 5 ## M_42450 31 27 ## M_52452 31 18 ## M_42398 31 20 ## M_35253 31 5 ## ______ ______ ## M_19130 5 34 ## M_33230 3 32 ## M_63361 5 31 ## M_53189 7 27 ## M_42450 31 27 ## ## Closeness centrality (unnormalized): ## group &#39;1&#39; group &#39;2&#39; ## M_35253 71.79398 51.58148 ## M_42398 70.9484 63.74822 ## M_33961 68.32261 55.35701 ## M_48258 67.49245 61.7771 ## M_33955 66.93392 57.32211 ## ______ ______ ## M_52447 63.54214 66.40753 ## M_52464 62.24541 65.07936 ## M_33230 62.53671 63.84338 ## M_42398 70.9484 63.74822 ## M_47118 64.7125 63.10391 ## ## Eigenvector centrality (unnormalized): ## group &#39;1&#39; group &#39;2&#39; ## M_42398 0.26682 0.21086 ## M_35253 0.26167 0.08052 ## M_48258 0.25696 0.1782 ## M_35186 0.23664 0.20434 ## M_33961 0.23245 0.11227 ## ______ ______ ## M_33230 0.18321 0.21563 ## M_47118 0.20899 0.21435 ## M_42398 0.26682 0.21086 ## M_35186 0.23664 0.20434 ## M_52447 0.13304 0.18604 7.6.4 Visualizing the network plot(props_group, sameLayout = TRUE, layoutGroup = 1, rmSingles = &quot;inboth&quot;, nodeSize = &quot;mclr&quot;, labelScale = FALSE, cexNodes = 1, cexLabels = 1.5, cexHubLabels = 2, cexTitle = 2, groupNames = group_names, hubBorderCol = &quot;gray40&quot;) legend(&quot;bottom&quot;, title = &quot;estimated association:&quot;, legend = c(&quot;+&quot;, &quot;-&quot;), col = c(&quot;#009900&quot;,&quot;red&quot;), inset = 0.04, cex = 3, lty = 1, lwd = 4, bty = &quot;n&quot;, horiz = TRUE) 7.6.5 Quantitative network comparison comp_group &lt;- netCompare(props_group, permTest = FALSE, verbose = FALSE) summary(comp_group, groupNames = group_names, showCentr = c(&quot;degree&quot;, &quot;between&quot;, &quot;closeness&quot;), numbNodes = 5) ## ## Comparison of Network Properties ## ---------------------------------- ## CALL: ## netCompare(x = props_group, permTest = FALSE, verbose = FALSE) ## ## ______________________________ ## Global network properties ## ````````````````````````` ## Mild Severe difference ## Number of components 1.000 1.000 0.000 ## Clustering coefficient 0.502 0.487 0.014 ## Moduarity 0.156 0.088 0.068 ## Positive edge percentage 51.116 49.241 1.875 ## Edge density 0.397 0.409 0.012 ## Natural connectivity 0.096 0.087 0.008 ## Vertex connectivity 9.000 7.000 2.000 ## Edge connectivity 9.000 7.000 2.000 ## Average dissimilarity* 0.673 0.682 0.009 ## Average path length** 0.923 0.916 0.007 ## ----- ## *: Dissimilarity = 1 - edge weight ## **Path length: Sum of dissimilarities along the path ## ## ______________________________ ## Jaccard index (similarity betw. sets of most central nodes) ## `````````````````````````````````````````````````````````` ## Jacc P(&lt;=Jacc) P(&gt;=Jacc) ## degree 0.278 0.412243 0.768928 ## betweenness centr. 0.120 0.014890 * 0.996495 ## closeness centr. 0.300 0.479343 0.702786 ## eigenvec. centr. 0.444 0.892398 0.223260 ## hub taxa 0.000 1.000000 1.000000 ## ----- ## Jaccard index ranges from 0 (compl. different) to 1 (sets equal) ## ## ______________________________ ## Adjusted Rand index (similarity betw. clusterings) ## `````````````````````````````````````````````````` ## ARI p-value ## 0.121 0 ## ----- ## ARI in [-1,1] with ARI=1: perfect agreement betw. clusterings, ## ARI=0: expected for two random clusterings ## p-value: two-tailed test with null hypothesis ARI=0 ## ## ______________________________ ## Centrality measures ## - In decreasing order ## - Computed for the complete network ## ```````````````````````````````````` ## Degree (unnormalized): ## Mild Severe abs.diff. ## M_19130 14 26 12 ## M_19266 21 10 11 ## M_48258 29 19 10 ## M_49617 10 19 9 ## M_35253 24 15 9 ## ## Betweenness centrality (unnormalized): ## Mild Severe abs.diff. ## M_35186 51 5 46 ## M_19130 5 34 29 ## M_33230 3 32 29 ## M_63361 5 31 26 ## M_53229 27 1 26 ## ## Closeness centrality (unnormalized): ## Mild Severe abs.diff. ## M_35253 71.794 51.581 20.213 ## M_33961 68.323 55.357 12.966 ## M_49617 46.281 57.240 10.958 ## M_53189 49.398 59.611 10.213 ## M_33955 66.934 57.322 9.612 ## ## _________________________________________________________ ## Significance codes: ***: 0.001, **: 0.01, *: 0.05, .: 0.1 7.7 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── References "],["enrichment-analysis.html", "Chapter 8 Enrichment Analysis 8.1 Enviroment Set up 8.2 Over representation analysis (ORA) 8.3 Clean environment 1 8.4 Single Sample Profiling 8.5 Clean environment 2 8.6 Quantitative Enrichment Analysis (QEA) 8.7 Systematic Information", " Chapter 8 Enrichment Analysis In this tutorial, we aim to help you to walk through the enrichment analysis in Metaboanalyst5. This module performs metabolite set enrichment analysis (MSEA) for human and mammalian species based on several libraries containing ~9000 groups of metabolite sets. Users can upload either 1) a list of compounds, 2) a list of compounds with concentrations, or 3) a concentration table. Before carrying out the analysis, you are advised to acquire a list of metabolites in your interest (normally acquired from differential analysis), then apply them to different modules in this tutorial according to the input file format. Here, we apply SCFA sequencing data of stool samples in GvHD project as demo data. 8.1 Enviroment Set up library(MetaboAnalystR) library(tibble) library(readxl) library(magrittr) #library(googledrive) 8.2 Over representation analysis (ORA) ORA is used to evaluate whether a particular set of metabolites is represented more than expected by chance within a given compound list. ORA is performed when the user provides only a list of compound names. ## Read input from the SCFA data of GvHD project. SCFA_tbl &lt;- readxl::read_xlsx(&#39;./dataset/InputFiles/GvHD_stool_metabolites_SCFA.xlsx&#39;) %&gt;% as.data.frame() metabolite_lst &lt;- SCFA_tbl$Compounds ## Create mSetObj, always initiate your mSet at the beginning. mSet &lt;- InitDataObjects(&quot;conc&quot;, &quot;msetora&quot;, FALSE) [1] “MetaboAnalyst R objects initialized …” ## Set up mSetObj with the list of compounds mSet &lt;- Setup.MapData(mSet, metabolite_lst) ## Cross reference list of compounds against libraries (hmdb, pubchem, chebi, kegg, metlin) mSet &lt;- CrossReferencing(mSet, &quot;name&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” [1] “1” [2] “Name matching OK, please inspect (and manual correct) the results then proceed.” ## Example compound name map mSet$name.map $query.vec [1] “Acetic acid” “Propionic acid” “Isobutyric acid” “Butyric acid” “Isovaleric acid” [6] “Valeric acid” “Hexanoic acid” $hit.inx [1] 29 158 1241 28 566 708 409 $hit.values [1] “Acetic acid” “Propionic acid” “Isobutyric acid” “Butyric acid” “Isovaleric acid” [6] “Valeric acid” “Caproic acid” $match.state [1] 1 1 1 1 1 1 1 ## Create the mapping results table mSet &lt;- CreateMappingResultTable(mSet) [1] “Loaded files from MetaboAnalyst web-server.” ## Set the metabolite filter mSet &lt;- SetMetabolomeFilter(mSet, F) ## Select metabolite set library, we use fecal in this example, you can also choose &quot;kegg_pathway&quot;, &quot;smpdb_pathway&quot;, &quot;blood&quot;, &quot;urine&quot;, &quot;csf&quot;, &quot;snp&quot;, &quot;predicted&quot;, &quot;location&quot;, &quot;drug, etc,. mSet &lt;- SetCurrentMsetLib(mSet, &quot;fecal&quot;, 2) ## Calculate hypergeometric score, results table generated in your working directory mSet &lt;- CalculateHyperScore(mSet) [1] “Loaded files from MetaboAnalyst web-server.” ora_res &lt;- read.csv(&#39;./msea_ora_result.csv&#39;, check.names = FALSE) ## Enrichment Ratio is computed by Hits / Expected, where hits = observed hits expected = expected hits (see the Table below) knitr::kable(head(ora_res)) total expected hits Raw p Holm p FDR Autism 204 1.130 12 0 0 0 Crohn’s Disease 522 2.880 22 0 0 0 Irritable Bowel Syndrome 186 1.030 14 0 0 0 Nonalcoholic Fatty Liver Disease 344 1.900 14 0 0 0 Pervasive Developmental Disorder Not Otherwise Specified 157 0.867 12 0 0 0 Ulcerative Colitis 609 3.360 14 0 0 0 ## Plot the ORA, bar-graph mSet &lt;- PlotORA(mSet, &quot;./dataset/OutputFiles/ora_0_&quot;, &quot;bar&quot;, &quot;png&quot;, 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/ora_0_dpi250.png&#39;) ## Plot DotPlot mSet &lt;- PlotEnrichDotPlot(mSet, &quot;ora&quot;, &quot;./dataset/OutputFiles/ora_dot_0_&quot;, &quot;png&quot;, 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/ora_dot_0_dpi250.png&#39;) 8.3 Clean environment 1 Remove all variables in env because a new mSet object needs to be created for the following analysis. rm(list = ls()) 8.4 Single Sample Profiling For common human biofluids such as blood, urine, or CSF, normal concentration ranges are known for many metabolites. In clinical metabolomic studies, it is often desirable to know whether certain metabolite concentrations in a given sample are significantly higher or lower than their normal ranges. MSEA’s SSP module is designed to provide this kind of analysis. In particular, SSP is performed when the user provides a two-column list of both compounds and concentrations. When called, the SSP module will compare the measured concentration values of each compound to its recorded normal reference ranges of the corresponding biofluid. Input for this module should be a list of metabolites and their concentrations (could be one column (1 x N) from a N * M abundance table with M samples/columns with N metabolites/rows). ## Read input from the SCFA data of GvHD project. SCFA_tbl &lt;- readxl::read_xlsx(&#39;./dataset/InputFiles/GvHD_stool_metabolites_SCFA.xlsx&#39;) %&gt;% as.data.frame() ## Initialize mSet object mSet &lt;- InitDataObjects(&quot;conc&quot;, &quot;msetssp&quot;, FALSE) [1] “MetaboAnalyst R objects initialized …” ## Read in metabolites names from SCFA_tbl cmpd.vec &lt;- SCFA_tbl$Compounds mSet &lt;- Setup.MapData(mSet, cmpd.vec) ## Read in concentration of sample CJY-V0 from SCFA_tbl conc.vec &lt;- SCFA_tbl$`CJY-V0` mSet &lt;- Setup.ConcData(mSet, conc.vec) ## Set unit of metabolites&#39; concentration mSet &lt;- Setup.BiofluidType(mSet, &quot;urine&quot;) ## Check names mSet &lt;- CrossReferencing(mSet, &quot;name&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” [1] “1” [2] “Name matching OK, please inspect (and manual correct) the results then proceed.” mSet &lt;- CreateMappingResultTable(mSet) [1] “Loaded files from MetaboAnalyst web-server.” ## Calculate SSP mSet &lt;- CalculateSSP(mSetObj = mSet) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” ## Select all metabolites in our interests and do ORA. mSet &lt;- Setup.MapData(mSet, cmpd.vec) ## Filter mSet &lt;- SetMetabolomeFilter(mSet, F) ## Setup library mSet &lt;- SetCurrentMsetLib(mSet, &quot;smpdb_pathway&quot;, 2) ## Calculate hyperscore mSet &lt;- CalculateHyperScore(mSet) [1] “Loaded files from MetaboAnalyst web-server.” ora_res &lt;- read.csv(&#39;./msea_ora_result.csv&#39;,check.names = FALSE) knitr::kable(head(ora_res)) total expected hits Raw p Holm p FDR Fatty Acid Biosynthesis 35 0.2390 3 0.00117 0.114 0.114 Vitamin K Metabolism 14 0.0957 1 0.09210 1.000 1.000 Beta Oxidation of Very Long Chain Fatty Acids 17 0.1160 1 0.11100 1.000 1.000 Butyrate Metabolism 19 0.1300 1 0.12300 1.000 1.000 Ethanol Degradation 19 0.1300 1 0.12300 1.000 1.000 Mitochondrial Beta-Oxidation of Short Chain Saturated Fatty Acids 27 0.1850 1 0.17100 1.000 1.000 ## Plot mSet &lt;- PlotORA(mSetObj = mSet, imgName = &quot;./dataset/OutputFiles/SSP_ora_0_&quot;, imgOpt = &quot;net&quot;, format = &quot;png&quot;, dpi = 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/SSP_ora_0_dpi250.png&#39;) mSet &lt;- PlotEnrichDotPlot(mSetObj = mSet, enrichType = &quot;ora&quot;, imgName = &quot;./dataset/OutputFiles/SSP_ora_dot_0_&quot;, format = &quot;png&quot;, dpi = 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/SSP_ora_dot_0_dpi250.png&#39;) 8.5 Clean environment 2 Remove all variables in env because a new mSet object needs to be created for the following analysis. rm(list = ls()) 8.6 Quantitative Enrichment Analysis (QEA) QEA is performed when the user uploads a concentration table containing metabolite concentration data from multiple samples. QEA is based on the globaltest algorithm to perform enrichment analysis directly from raw concentration data and does not require a list of significantly changed compounds. Especially, QEA adopted globaltest as the backend. Please find citation for detailed introduction. In short, globaltest calculates Q values, the formula to calculate Q-statistic can be obtained from the original publication by (Goeman JJ, et al). Q-statistic can be intuitively interpreted as an aggregate of squared covariance between concentration changes and the phenotypes - compounds with large variance have much more influence on the Q than compound with small variance. And the null hypothesis in QEA to be tested are made to be whether two groups of samples are not different with respect to their overall metabolites’ abundance pattern. Under this hypothesis, expectation and standard deviation can be calculated and p value can be estimated. If p &lt; 0.05, it means that two groups of samples are different with respect to their overall metabolites’ abundance pattern. ## Create mSetObj mSet &lt;- InitDataObjects(&quot;conc&quot;, &quot;msetqea&quot;, FALSE) Starting Rserve: /Library/Frameworks/R.framework/Resources/bin/R CMD /Library/Frameworks/R.framework/Versions/4.1/Resources/library/Rserve/libs//Rserve –no-save [1] “MetaboAnalyst R objects initialized …” ## Read in data table SCFA_tbl &lt;- readxl::read_xlsx(&#39;./dataset/InputFiles/GvHD_stool_metabolites_SCFA.xlsx&#39;) %&gt;% as.data.frame() ## Replace N/A with NA SCFA_tbl[SCFA_tbl == &quot;N/A&quot;] &lt;- NA ## Select columns from input data table SCFA_tbl &lt;- SCFA_tbl[,c(2,5:ncol(SCFA_tbl))] %&gt;% column_to_rownames(&#39;Compounds&#39;) %&gt;% t() %&gt;% as.data.frame() ## Create Group Info SCFA_tbl %&lt;&gt;% dplyr::mutate(Group = c(rep(&#39;A&#39;,25), rep(&#39;B&#39;,31))) %&gt;% dplyr::select(c(&#39;Group&#39;, colnames(.)[colnames(.) != &#39;Group&#39;])) %&gt;% rownames_to_column(&#39;Samples&#39;) ## Write data table in csv file write.csv(SCFA_tbl, &#39;./dataset/OutputFiles/GvHD_stool_metabolites_SCFA.csv&#39;, row.names = FALSE) ## Read in data table mSet &lt;- Read.TextData(mSet, &quot;./dataset/OutputFiles/GvHD_stool_metabolites_SCFA.csv&quot;, &quot;rowu&quot;, &quot;disc&quot;) # Perform cross-referencing of compound names mSet &lt;- CrossReferencing(mSet, &quot;name&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” [1] “1” [2] “Name matching OK, please inspect (and manual correct) the results then proceed.” # Create mapping results table mSet &lt;- CreateMappingResultTable(mSet) [1] “Loaded files from MetaboAnalyst web-server.” # Mandatory check of data mSet &lt;- SanityCheckData(mSet) [1] “Successfully passed sanity check!” [2] “Samples are not paired.” [3] “2 groups were detected in samples.” [4] “Only English letters, numbers, underscore, hyphen and forward slash (/) are allowed.” [5] “Other special characters or punctuations (if any) will be stripped off.” [6] “All data values are numeric.” [7] “A total of 26 (6.6%) missing values were detected.” [8] “By default, missing values will be replaced by 1/5 of min positive values of their corresponding variables” [9] “Click the Proceed button if you accept the default practice;” [10] “Or click the Missing Values button to use other methods.” # Replace missing values with minimum concentration levels mSet &lt;- ReplaceMin(mSet) # Perform no normalization mSet &lt;- PreparePrenormData(mSet) #mSet &lt;- Normalization(mSet, rowNorm = &quot;SumNorm&quot;, transNorm = &quot;LogNorm&quot;, scaleNorm = &quot;ParetoNorm&quot;, ref = &quot;PIF_178&quot;, ratio=FALSE, ratioNum=20) mSet &lt;- Normalization(mSet, rowNorm = &quot;SumNorm&quot;, transNorm = &quot;LogNorm&quot;, scaleNorm = &quot;ParetoNorm&quot;) # Plot normalization mSet &lt;- PlotNormSummary(mSet, &quot;./dataset/OutputFiles/norm_0_&quot;, &quot;png&quot;, 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/norm_0_dpi250.png&#39;) # Plot sample-wise normalization mSet &lt;- PlotSampleNormSummary(mSet, &quot;./dataset/OutputFiles/snorm_0_&quot;, &quot;png&quot;, 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/snorm_0_dpi250.png&#39;) # Set the metabolome filter mSet &lt;- SetMetabolomeFilter(mSet, F) # Set the metabolite set library to pathway mSet &lt;- SetCurrentMsetLib(mSet, &quot;smpdb_pathway&quot;, 2) # Calculate the global test score mSet &lt;- CalculateGlobalTestScore(mSet) [1] “Loaded files from MetaboAnalyst web-server.” msea_qea_res &lt;- read.csv(&#39;./msea_qea_result.csv&#39;) knitr::kable(head(msea_qea_res)) X Total.Cmpd Hits Statistic.Q Expected.Q Raw.p Holm.p FDR Propanoate Metabolism 42 1 4.3168 1.8182 0.12440 1 0.62002 Vitamin K Metabolism 14 1 4.3168 1.8182 0.12440 1 0.62002 Butyrate Metabolism 19 1 2.1853 1.8182 0.27692 1 0.62002 Fatty Acid Biosynthesis 35 3 1.7437 1.8182 0.37316 1 0.62002 Beta Oxidation of Very Long Chain Fatty Acids 17 1 1.4123 1.8182 0.38302 1 0.62002 Mitochondrial Beta-Oxidation of Short Chain Saturated Fatty Acids 27 1 1.4123 1.8182 0.38302 1 0.62002 # Plot the QEA mSet &lt;- PlotQEA.Overview(mSet, &quot;./dataset/OutputFiles/qea_0_&quot;, &quot;bar&quot;, &quot;png&quot;, 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/qea_0_dpi250.png&#39;) mSet &lt;- PlotEnrichDotPlot(mSet, &quot;qea&quot;, &quot;./dataset/OutputFiles/qea_dot_0_&quot;, &quot;png&quot;, 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/qea_dot_0_dpi250.png&#39;) 8.7 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── "],["pathway-analysis.html", "Chapter 9 Pathway Analysis 9.1 Enviroment Set up 9.2 Over representation analysis 9.3 Clean environment 1 9.4 Concentration Table (QEA) 9.5 Systematic Information", " Chapter 9 Pathway Analysis In this tutorial, we aim to help you to walk through the pathway analysis in Metaboanalyst5. This module supports pathway analysis (integrating enrichment analysis and pathway topology analysis) and visualization for 26 model organisms, including Human, Mouse, Rat, Cow, Chicken, Zebrafish, Arabidopsis thaliana, Rice, Drosophila, Malaria, S. cerevisae, E.coli, and others species. Here, we apply TM metabolites sequencing data of stool samples in GvHD project as demo data. Moreover, to reduce data noise, we selected differentially abundant metabolites in aGVHD patients from the differential analysis result in Xu XiaoMin’s analysis. 9.1 Enviroment Set up 9.2 Over representation analysis Similar to ORA in Enrichment analysis. ## Read in differentially abundant TM metanolites data from GVHD project DA_metabolites &lt;- readxl::read_xlsx(&#39;./dataset/InputFiles/DA_metabolites_agvhd_adult_result.xlsx&#39;) %&gt;% as.data.frame() ## Create vector consisting of compounds for enrichment analysis tmp.vec &lt;- DA_metabolites$Compounds ## Create mSetObj for storing objects created during your analysis mSet &lt;- InitDataObjects(&quot;conc&quot;, &quot;pathora&quot;, FALSE) ## Set up mSetObj with the list of compounds mSet &lt;- Setup.MapData(mSet, tmp.vec) ## Cross reference list of compounds against libraries (hmdb, pubchem, chebi, kegg, metlin). This step is to make sure that all metabolites names provided match the metabolites&#39; names in KEGG database. mSet &lt;- CrossReferencing(mSet, &quot;name&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” [1] “0” [2] “Over half of the compound IDs could not be matched to our database. Please make sure that correct compound IDs or common compound names are used.” ## Remove metabolites failed to match the metabolites&#39; names in KEGG database. tmp.vec &lt;- tmp.vec[mSet$name.map$match.state == 1] ## Re-initialize mSet object mSet &lt;- InitDataObjects(&quot;conc&quot;, &quot;pathora&quot;, FALSE) ## Set up mSetObj with the matched list of compounds mSet &lt;- Setup.MapData(mSet, tmp.vec) ## Cross reference list of compounds against libraries (hmdb, pubchem, chebi, kegg, metlin). Check again if all metabolites&#39; names have their matches in KEGG database mSet &lt;- CrossReferencing(mSet, &quot;name&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” [1] “1” [2] “Name matching OK, please inspect (and manual correct) the results then proceed.” ## Creates a mapping result table shows HMDB, KEGG, PubChem, etc. IDs. Saved as &quot;name_map.csv&quot; or can be found in mSet$dataSet$map.table. Compounds with no hits will contain NAs across the columns. mSet &lt;- CreateMappingResultTable(mSet) [1] “Loaded files from MetaboAnalyst web-server.” ## Select the pathway library, ranging from mammals to prokaryotes ## Note the third parameter, where users need to input the KEGG pathway version. ## Use &quot;current&quot; for the latest KEGG pathway library or &quot;v2018&quot; for the KEGG pathway library version prior to November 2019. mSet &lt;- SetKEGG.PathLib(mSet, &quot;hsa&quot;, &quot;current&quot;) ## Set the metabolite filter. Default set to false mSet &lt;- SetMetabolomeFilter(mSet, F) ## Calculate the over representation analysis score, here we selected to use the hypergeometric test (alternative is Fisher&#39;s exact test) ## A results table &quot;pathway_results.csv&quot; will be created and found within your working directory mSet &lt;- CalculateOraScore(mSet, &quot;rbc&quot;, &quot;hyperg&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “http://api.xialab.ca/pathwayora” pathway_res &lt;- read.csv(&#39;./pathway_results.csv&#39;) knitr::kable(head(pathway_res)) X Total Expected Hits Raw.p X.log.p. Holm.adjust FDR Impact hsa00130 9 0.046452 1 0.04562 3.0874 1 1 0.00000 hsa00030 22 0.113550 1 0.10830 2.2229 1 1 0.04712 hsa00564 36 0.185810 1 0.17174 1.7618 1 1 0.00000 # Plot of the Pathway Analysis Overview mSet &lt;- PlotPathSummary(mSet,show.grid=FALSE, &quot;./dataset/OutputFiles/path_view_0_&quot;, &quot;png&quot;, dpi =250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/path_view_0_dpi250.png&#39;) # Plot a specific metabolic pathway, in this case &quot;Glycine, serine and threonine metabolism&quot; # mSet &lt;- PlotKEGGPath(mSetObj = mSet, pathName = &quot;Glycine, serine and threonine metabolism&quot;, 528, 480, &quot;png&quot;, dpi=72) 9.3 Clean environment 1 rm(list = ls()) 9.4 Concentration Table (QEA) Similar to QEA in Enrichment analysis. KO enrichment is calculated via the global test algorithm when abundance of metabolites are provided. Global test evaluates whether a set of genes (i.e. KEGG pathways) is significantly associated with a variable of interest. Compared to ORA, which uses only the total number of KO hits in a pathway, global test considers the gene abundance values and is considered to be more sensitive than ORA. It assumes that if a gene set can be used to predict an outcome of interest, the gene expression patterns per outcome must be different. The global test algorithm is implemented in MicrobiomeAnalyst using the globaltest R package. P-values for both methods are corrected for multiple-testing using the Benjamini and Hochberg’s False-Discovery Rate (FDR). In this module, we use differentially abundant metabolites in aGVHD patients from the differential analysis result in Xu XiaoMin’s analysis and their abundance as input. ## Read in differentially abundant TM metanolites data from GVHD project DA_metabolites &lt;- readxl::read_xlsx(&#39;./dataset/InputFiles/DA_metabolites_agvhd_adult_result.xlsx&#39;) %&gt;% as.data.frame() ## Initialize data object mSet &lt;- InitDataObjects(&quot;conc&quot;, &quot;pathqea&quot;, FALSE) Starting Rserve: /Library/Frameworks/R.framework/Resources/bin/R CMD /Library/Frameworks/R.framework/Versions/4.1/Resources/library/Rserve/libs//Rserve –no-save [1] “MetaboAnalyst R objects initialized …” ## Read in data table input_df &lt;- readxl::read_xlsx(&#39;./dataset/InputFiles/GvHD_stool_metabolites_TM.xlsx&#39;) %&gt;% as.data.frame() %&gt;% .[,c(2,25:ncol(.))] %&gt;% column_to_rownames(&#39;Compounds&#39;) %&gt;% .[DA_metabolites$Compounds,] %&gt;% t() %&gt;% as.data.frame() Groupinfo &lt;- rownames(input_df) %&gt;% stringr::str_split(&#39;-&#39;) %&gt;% as.data.frame() %&gt;% .[2,] %&gt;% unlist() %&gt;% as.vector() input_df %&lt;&gt;% dplyr::mutate(Group = Groupinfo) %&gt;% dplyr::select(c(&#39;Group&#39;, colnames(.)[colnames(.) != &#39;Group&#39;])) %&gt;% rownames_to_column(&#39;Sample&#39;) ## Write reformed metabolites abundance table into csv file write.csv(input_df, &#39;./dataset/OutputFiles/GvHD_stool_metabolites_TM.csv&#39;,row.names = FALSE) mSet &lt;- Read.TextData(mSet, &#39;./dataset/OutputFiles/GvHD_stool_metabolites_TM.csv&#39;, &quot;rowu&quot;, &quot;disc&quot;) ## Show first few rows in data table knitr::kable(head(input_df)) Sample Group Erucic acid 5-Methylcytosine D-Gluconic Acid LPE(14:0/0:0) N-Acetylglucosamine 1-Phosphate 7-ketodeoxycholic acid Bis(1-inositol) -3,1’-phosphate 1-phosphate Asp-phe Phenylacetyl-L-Glutamine N-Acetylglycine Carnitine C2:0 Acetylcholine Lithocholic acid 3-Carboxypropyltrimethylammonium Biotinamide 5’-deoxy-5’-fluoroadenosine Carnitine C5:1 Val-Val Gly Leu Tyr Ile-Thr Isoleucyl-Serine Isoleucyl-Tyrosine Phe Val Ala Phosphonic acid, P-[(3R)-3-amino-4-[(3-hexylphenyl)amino]-4-oxobutyl]- 2-[2,4-dihydroxy-3-(3-methylbut-2-en-1-yl)phenyl]-1-[2,4,6-trihydroxy-3-(3-methylbut-2-en-1-yl)phenyl]propan-1-one Asp Ile Ile Gly Leu Val Ile Glu Leu Ile Ile Asn Lys Pro Ile Phylloquinone oxide Thr Val Met Val Leu Thr (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoate TZW-V0 V0 1629500 630750 11598000 1900000 1048900 142580.0 4516900 1896000 483960 75306000 35820000 169220 30462 169220 72050 52622 48756 6690500 382840 151620 863010 3696700 371890 419900 376300 1992200 304420 321110 243390 17617 3885 1950000 582200 208490000 LBC-V0 V0 17057 220290 8239500 68958 9880900 6446.1 313960 19488000 569570 11310000 81713000 90812 9 90812 533990 9 338900 1044600 9 99102 468170 7789300 46193 88988 14154 463070 10903 32430 29187 12902000 9 333220 210680 166450000 HXZ-V0 V0 3719000 316360 91189 14390000 37784000 21965000.0 459320 5671200 8502200 6758300 71495000 518950 438800 518950 1222000 36295 953350 8538900 88531 454250 952750 56697 45953 115110 2798900 348560 79613 134400 438750 7569200 24432 747830 86317 2163600 LJY-V0 V0 1641600 285270 72194 7366800 9557700 3289400.0 71782 756830 30602 531930 387590 1345400 6488400 1345400 544550 27188 295820 3163500 136380 180510 819430 21168 171330 159850 1478200 804870 128420 910850 379890 78433 459240 576110 123100 1502600 CJY-V0 V0 9 45013 25589 882500 561320 1603.1 9 7463500 556470 5814900 13723000 26319 9 26319 182350 18175 135980 1555700 38015 130400 441760 3275600 235320 154660 169880 568150 35916 48067 215340 328930 9 763870 97575 900440 WKM-V0 V0 3079600 228130 396980 8410000 12296000 7266400.0 42405 13785000 4553400 9620400 1311800 4392400 9 4392400 74831 79472 48558 5309200 88741 221440 593130 44678 250550 140720 1660200 522490 234090 263740 415690 9312900 586940 619550 136990 8894600 ## Check metabolites Names of input table. Found &gt;15 compounds without matches. mSet &lt;- CrossReferencing(mSet, &quot;name&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” [1] “0” [2] “Over half of the compound IDs could not be matched to our database. Please make sure that correct compound IDs or common compound names are used.” ## Keep matched metabolites metabolites_keep &lt;- mSet$name.map$query.vec[mSet$name.map$match.state == 1] input_df &lt;- input_df[c(&#39;Sample&#39;,&#39;Group&#39;, metabolites_keep)] ## Overwrite previously generated abundance csv file with matched metabolites write.csv(input_df, &#39;./dataset/OutputFiles/GvHD_stool_metabolites_TM.csv&#39;,row.names = FALSE) ## Initialize data object again mSet &lt;- InitDataObjects(&quot;conc&quot;, &quot;pathqea&quot;, FALSE) ## Read in updated metabolites abundance table mSet &lt;- Read.TextData(mSet, &#39;./dataset/OutputFiles/GvHD_stool_metabolites_TM.csv&#39;, &quot;rowu&quot;, &quot;disc&quot;) ## Check Sanity and replace 0 mSet &lt;- SanityCheckData(mSet) [1] “Successfully passed sanity check!” [2] “Samples are not paired.” [3] “2 groups were detected in samples.” [4] “Only English letters, numbers, underscore, hyphen and forward slash (/) are allowed.” [5] “Other special characters or punctuations (if any) will be stripped off.” [6] “All data values are numeric.” [7] “A total of 0 (0%) missing values were detected.” [8] “By default, missing values will be replaced by 1/5 of min positive values of their corresponding variables” [9] “Click the Proceed button if you accept the default practice;” [10] “Or click the Missing Values button to use other methods.” mSet &lt;- ReplaceMin(mSet) ## Check metabolites Names of input table again mSet &lt;- CrossReferencing(mSet, &quot;name&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “Loaded files from MetaboAnalyst web-server.” [1] “1” [2] “Name matching OK, please inspect (and manual correct) the results then proceed.” ## Creates a mapping result table shows HMDB, KEGG, PubChem, etc. IDs. Saved as &quot;name_map.csv&quot; or can be found in mSet$dataSet$map.table. Compounds with no hits will contain NAs across the columns. mSet &lt;- CreateMappingResultTable(mSet) [1] “Loaded files from MetaboAnalyst web-server.” ## Normalize mSet &lt;- PreparePrenormData(mSet) mSet &lt;- Normalization(mSet, rowNorm = &quot;SumNorm&quot;, transNorm = &quot;LogNorm&quot;, scaleNorm = &quot;ParetoNorm&quot;) mSet &lt;- PlotNormSummary(mSet, imgName = &quot;./dataset/OutputFiles/kegg_pathnorm_0_&quot;, format = &quot;png&quot;, dpi = 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/kegg_pathnorm_0_dpi250.png&#39;) mSet &lt;- PlotSampleNormSummary(mSet, &quot;./dataset/OutputFiles/kegg_pathsnorm_0_&quot;, &quot;png&quot;, 250, width=NA) knitr::include_graphics(&#39;./dataset/OutputFiles/kegg_pathsnorm_0_dpi250.png&#39;) ## Enrich to KEGG mSet &lt;- SetKEGG.PathLib(mSet, &quot;hsa&quot;, &quot;current&quot;) mSet &lt;- SetMetabolomeFilter(mSet, F) mSet &lt;- CalculateQeaScore(mSet, &quot;rbc&quot;, &quot;gt&quot;) [1] “Loaded files from MetaboAnalyst web-server.” [1] “http://api.xialab.ca/pathwayqea” [1] “Pathway QEA via api.metaboanalyst.ca successful!” pathway_res &lt;- read.csv(&#39;./pathway_results.csv&#39;, check.names = FALSE) knitr::kable(head(pathway_res)) Total Cmpd Hits Raw p -log(p) Holm adjust FDR Impact Pentose phosphate pathway 22 1 0.0024452 6.0136 0.0073355 0.0073355 0.04712 Glycerophospholipid metabolism 36 1 0.0206320 3.8809 0.0412630 0.0267100 0.00000 Ubiquinone and other terpenoid-quinone biosynthesis 9 1 0.0267100 3.6227 0.0412630 0.0267100 0.00000 mSet &lt;- PlotPathSummary(mSet, F, &quot;./dataset/OutputFiles/kegg_path_view_0_&quot;, &quot;png&quot;, 250, width=NA, NA, NA ) knitr::include_graphics(&#39;./dataset/OutputFiles/kegg_path_view_0_dpi250.png&#39;) ## Plot specified pathway map # mSet &lt;- PlotKEGGPath(mSet, &quot;Phenylalanine, tyrosine and tryptophan biosynthesis&quot;,576, 480, &quot;png&quot;, NULL) # mSet &lt;- RerenderMetPAGraph(mSet, &quot;zoom1658398230135.png&quot;,576.0, 480.0, 100.0) # mSet &lt;- PlotKEGGPath(mSet, &quot;Glycine, serine and threonine metabolism&quot;,576, 480, &quot;png&quot;, NULL) 9.5 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── "],["example.html", "Chapter 10 Example 10.1 Loading packages 10.2 Importing data 10.3 Data Processing 10.4 Cluster Analysis 10.5 Chemometrics Analysis 10.6 Univariate Analysis 10.7 Feature Selection 10.8 Network Analysis 10.9 Network Analysis by WGCNA 10.10 Systematic Information", " Chapter 10 Example We perform all the data analysis on our own metabolomic data in this chapter. There are several datasets: GvHD stool metabolites TM wide-target sequencing: /home/xuxiaomin/project/NanFangHospitalGvHD/00.data/metabolites_TM/MWY-20-522-01_2021-03-25_17-34-06/1.Data_assess/ALL_sample_data.xlsx GvHD stool metabolites SCFA: /home/xuxiaomin/project/NanFangHospitalGvHD/00.data/metabolites_scfa/SCFA.levels.xlsx PD-1 mice trial (round 2) serum metabolites TM wide-target sequencing: /home/xuxiaomin/project/pd1_mice/Round_2/00.data/MetaboliteSerum/MWY-20-049/1.Data_assess/all_group/ALL_sample_data.xlsx and the metadata: GvHD metadata: /home/xuxiaomin/project/NanFangHospitalGvHD/00.data/metadata/metadata_v4.txt We transform their names as following: GvHD_stool_metabolites_TM.xlsx GvHD_stool_metabolites_SCFA.xlsx PD1_mice_serum_metabolites_TM.xlsx GvHD_metadata.txt Here, we use the GvHD_stool_metabolites_TM.xlsx to practice our template. 10.1 Loading packages knitr::opts_chunk$set(warning = F) library(dplyr) library(tibble) library(POMA) library(ggplot2) library(ggraph) library(plotly) library(SummarizedExperiment) library(readxl) library(cluster) # clustering algorithms library(factoextra) # clustering visualization library(dendextend) # for comparing two dendrograms library(NetCoMi) library(SPRING) library(SpiecEasi) library(WGCNA) # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 10.2 Importing data features table profile &lt;- readxl::read_xlsx(&quot;./dataset/GvHD_stool_metabolites_TM.xlsx&quot;, sheet = 1) head(profile) ## # A tibble: 6 × 78 ## Index Compounds 物质 `Class I` 物质一级分类 `Class II` 物质二级分类 `Q1 (Da)` `Molecular Wei…` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MEDL0… 2-Hydrox… - - - - - 117. 118. ## 2 MEDL0… Phe-Asp - - - - - 245. 348. ## 3 MEDL0… Glu-Phe - - - - - 293. 294. ## 4 MEDL0… Glu-Trp - - - - - 334. 333. ## 5 MEDL0… 1-Oleoyl… - - - - - 525. 521. ## 6 MEDL0… Conferti… - - - - - 233. 234. ## # … with 69 more variables: `Ionization model` &lt;chr&gt;, Formula &lt;chr&gt;, `KEGG ID` &lt;chr&gt;, HMDB &lt;chr&gt;, ## # `Pubchem CID` &lt;chr&gt;, CAS &lt;chr&gt;, ChEBI &lt;chr&gt;, Metlin &lt;chr&gt;, mix01 &lt;dbl&gt;, mix02 &lt;dbl&gt;, ## # mix03 &lt;dbl&gt;, mix04 &lt;dbl&gt;, mix05 &lt;dbl&gt;, mix06 &lt;dbl&gt;, mix07 &lt;dbl&gt;, `TZW-V0` &lt;dbl&gt;, ## # `LBC-V0` &lt;dbl&gt;, `HXZ-V0` &lt;dbl&gt;, `LJY-V0` &lt;dbl&gt;, `CJY-V0` &lt;dbl&gt;, `WKM-V0` &lt;dbl&gt;, ## # `WJH-V0` &lt;dbl&gt;, `ZTX2-V0` &lt;dbl&gt;, `DGL-V0` &lt;dbl&gt;, `ZHP-V0` &lt;dbl&gt;, `MZH-V0` &lt;dbl&gt;, ## # `WL-V0` &lt;dbl&gt;, `LWJ2-V0` &lt;dbl&gt;, `SZP-V0` &lt;dbl&gt;, `LPQ-V0` &lt;dbl&gt;, `LHR-V0` &lt;dbl&gt;, ## # `XQ-V0` &lt;dbl&gt;, `LJD-V0` &lt;dbl&gt;, `LXH-V0` &lt;dbl&gt;, `YF-V0` &lt;dbl&gt;, `ZJW-V0` &lt;dbl&gt;, … metadata table metadata &lt;- data.table::fread(&quot;./dataset/GvHD_metadata.txt&quot;) head(metadata) ## seq_id SampleName FMT_status SampleType Group V1_outcome GVHD_type ## 1: 4371 CJY V0 stool kid CR cGVHD ## 2: 4389 CJY V1 stool kid CR cGVHD ## 3: 4426 CJY_WKM_LXH_FMTdonor bacteria_solution donor ## 4: 4375 DGL V0 stool adult CR cGVHD ## 5: 4393 DGL V1 stool adult CR cGVHD ## 6: 4435 DGL_FMTdonor bacteria_solution donor ## GVHD_type_phynotype Donor baseline_merge baseline_aGVHD_sainai baseline_aGVHD_sainai_detail ## 1: diarrhea DO1 ## 2: diarrhea DO1 ## 3: ## 4: bowel DO2 medium ## 5: bowel DO2 ## 6: ## baseline_aGVHD_glucksberg baseline_aGVHD_glucksberg_detail baseline_cGVHD_NIH ## 1: ## 2: ## 3: ## 4: 中度 ## 5: ## 6: ## baseline_cGVHD_NIH_detail Baseline_infection antibiotics_48h_pre_or_post_FMT ## 1: ## 2: ## 3: ## 4: 肠道2级，皮肤1级 ## 5: ## 6: ## GVHDdrug_antiMicrobiomeDrug_2weeksPreV0 GVHDdrug_antiMicrobiomeDrug_V0toV1 FMT_method ## 1: nasojejunal tube ## 2: nasojejunal tube ## 3: ## 4: 他克莫司、麦考酚酯、伊曲康唑 他克莫司、麦考酚酯、伊曲康唑 colonoscope ## 5: 他克莫司、麦考酚酯、伊曲康唑 他克莫司、麦考酚酯、伊曲康唑 colonoscope ## 6: ## gender age Diagnosis HSCT_DLI_date Pretreatment ## 1: male 3 AML 2020/5/28 Ara-c+CY+IVBu+ATG+Flu+PTCy+PTCy（Ara+Cy+Bu+Flu+PTCy） ## 2: male 3 AML 2020/5/28 Ara-c+CY+IVBu+ATG+Flu+PTCy+PTCy（Ara+Cy+Bu+Flu+PTCy） ## 3: NA ## 4: male 36 AML 2019/12/1 BUCY ## 5: male 36 AML 2019/12/1 BUCY ## 6: NA ## Pretreatment_type GVHD_prevention death relapse ## 1: marrow cleansing PTCY+PTFLU+MMF+FK506 ## 2: marrow cleansing PTCY+PTFLU+MMF+FK506 ## 3: ## 4: marrow cleansing CSA+MTX+MMF+ATG ## 5: marrow cleansing CSA+MTX+MMF+ATG ## 6: Data Preparation: SummarizedExperiment object Renaming column Replace 9 by NA column with mix prefix are regards as QC samples getSEobject &lt;- function(x, y) { # x = metadata # y = profile # mix : qc samples qc_samples &lt;- grep(&quot;mix&quot;, colnames(profile), value = T) qc_groups &lt;- data.frame(SampleID = qc_samples, V1_outcome = rep(&quot;QC&quot;, length(qc_samples)), SampleName = rep(&quot;SampleName&quot;, length(qc_samples)), FMT_status = rep(&quot;FMT_status&quot;, length(qc_samples)), gender = rep(&quot;gender&quot;, length(qc_samples)), age = rep(&quot;age&quot;, length(qc_samples))) # target table target &lt;- x %&gt;% dplyr::filter(FMT_status != &quot;&quot;) %&gt;% dplyr::mutate(SampleID = paste(SampleName, FMT_status, sep = &quot;_&quot;)) %&gt;% dplyr::select(SampleID, V1_outcome, SampleName, FMT_status, gender, age) %&gt;% rbind(qc_groups) # profile column colnames(y) &lt;- gsub(&quot;-&quot;, &quot;_&quot;, colnames(y)) sid &lt;- intersect(target$SampleID, colnames(y)) features &lt;- y %&gt;% dplyr::select(all_of(sid)) %&gt;% data.frame() %&gt;% t() colnames(features) &lt;- y$Index # replace 9 by NA features[features == 9] &lt;- NA target &lt;- target[pmatch(sid, target$SampleID), , F] res &lt;- PomaSummarizedExperiment(target = target, features = features) return(res) } se &lt;- getSEobject(metadata, profile) se ## class: SummarizedExperiment ## dim: 1235 61 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(1235): MEDL00066 MEDL00356 ... MW0169477 MW0169569 ## rowData names(0): ## colnames(61): CJY_V0 CJY_V1 ... mix06 mix07 ## colData names(5): group SampleName FMT_status gender age 10.3 Data Processing 10.3.1 Data Checking Features in PomaSummarizedExperiment object must have the following criterion: All data values are numeric. A total of 0 (0%) missing values were detected. CheckData &lt;- function(object) { features_tab &lt;- SummarizedExperiment::assay(object) # numeric &amp; missing values int_mat &lt;- features_tab rowNms &lt;- rownames(int_mat) colNms &lt;- colnames(int_mat) naNms &lt;- sum(is.na(int_mat)) for (i in 1:ncol(int_mat)) { if (class(int_mat[, i]) == &quot;integer64&quot;) { int_mat[, i] &lt;- as.double(int_mat[, i]) } } num_mat &lt;- apply(int_mat, 2, as.numeric) if (sum(is.na(num_mat)) &gt; naNms) { num_mat &lt;- apply(int_mat, 2, function(x) as.numeric(gsub(&quot;,&quot;, &quot;&quot;, x))) if (sum(is.na(num_mat)) &gt; naNms) { message(&quot;&lt;font color=\\&quot;red\\&quot;&gt;Non-numeric values were found and replaced by NA.&lt;/font&gt;&quot;) } else { message(&quot;All data values are numeric.&quot;) } } else { message(&quot;All data values are numeric.&quot;) } int_mat &lt;- num_mat rownames(int_mat) &lt;- rowNms colnames(int_mat) &lt;- colNms varCol &lt;- apply(int_mat, 2, var, na.rm = T) constCol &lt;- (varCol == 0 | is.na(varCol)) constNum &lt;- sum(constCol, na.rm = T) if (constNum &gt; 0) { message(paste(&quot;&lt;font color=\\&quot;red\\&quot;&gt;&quot;, constNum, &quot;features with a constant or single value across samples were found and deleted.&lt;/font&gt;&quot;)) int_mat &lt;- int_mat[, !constCol, drop = FALSE] } totalCount &lt;- nrow(int_mat) * ncol(int_mat) naCount &lt;- sum(is.na(int_mat)) naPercent &lt;- round(100 * naCount/totalCount, 1) message(paste(&quot;A total of &quot;, naCount, &quot; (&quot;, naPercent, &quot;%) missing values were detected.&quot;, sep = &quot;&quot;)) # save int_mat into se object target &lt;- SummarizedExperiment::colData(object) %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;SampleID&quot;) res &lt;- PomaSummarizedExperiment(target = target, features = t(int_mat)) return(res) } se &lt;- CheckData(object = se) se ## class: SummarizedExperiment ## dim: 1235 61 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(1235): MEDL00066 MEDL00356 ... MW0169477 MW0169569 ## rowData names(0): ## colnames(61): CJY_V0 CJY_V1 ... mix06 mix07 ## colData names(5): group SampleName FMT_status gender age 10.3.2 Data Filtering FilterFeature &lt;- function( object, qc_label, method = c(&quot;none&quot;, &quot;iqr&quot;, &quot;rsd&quot;, &quot;nrsd&quot;, &quot;mean&quot;, &quot;sd&quot;, &quot;mad&quot;, &quot;median&quot;), rsd_cutoff = 25) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) # QC samples qc_samples &lt;- metadata_tab %&gt;% data.frame() %&gt;% dplyr::filter(group == qc_label) if (dim(qc_samples)[1] == 0) { stop(&quot;No qc samples have been chosen, please check your input&quot;) } # QC samples&#39; feature table qc_feature &lt;- features_tab[, colnames(features_tab) %in% rownames(qc_samples)] %&gt;% t() # filter features by QC RSD rsd &lt;- rsd_cutoff / 100 sds &lt;- apply(qc_feature, 2, sd, na.rm = T) mns &lt;- apply(qc_feature, 2, mean, na.rm = T) rsd_vals &lt;- abs(sds/mns) %&gt;% na.omit() gd_inx &lt;- rsd_vals &lt; rsd int_mat &lt;- features_tab[gd_inx, ] message(&quot;Removed &quot;, (dim(qc_feature)[2] - dim(int_mat)[1]), &quot; features based on QC RSD values. QC samples are excluded from downstream functional analysis.&quot;) # whether to filter features by percentage according to the number PerformFeatureFilter &lt;- function(datMatrix, qc_method = method, remain_num = NULL) { dat &lt;- datMatrix feat_num &lt;- ncol(dat) feat_nms &lt;- colnames(dat) nm &lt;- NULL if (qc_method == &quot;none&quot; &amp;&amp; feat_num &lt; 5000) { # only allow for less than 4000 remain &lt;- rep(TRUE, feat_num) nm &lt;- &quot;No filtering was applied&quot; } else { if (qc_method == &quot;rsd&quot;){ sds &lt;- apply(dat, 2, sd, na.rm = T) mns &lt;- apply(dat, 2, mean, na.rm = T) filter_val &lt;- abs(sds/mns) nm &lt;- &quot;Relative standard deviation&quot; } else if (qc_method == &quot;nrsd&quot; ) { mads &lt;- apply(dat, 2, mad, na.rm = T) meds &lt;- apply(dat, 2, median, na.rm = T) filter_val &lt;- abs(mads/meds) nm &lt;- &quot;Non-paramatric relative standard deviation&quot; } else if (qc_method == &quot;mean&quot;) { filter_val &lt;- apply(dat, 2, mean, na.rm = T) nm &lt;- &quot;mean&quot; } else if (qc_method == &quot;sd&quot;) { filter_val &lt;- apply(dat, 2, sd, na.rm = T) nm &lt;- &quot;standard deviation&quot; } else if (qc_method == &quot;mad&quot;) { filter_val &lt;- apply(dat, 2, mad, na.rm = T) nm &lt;- &quot;Median absolute deviation&quot; } else if (qc_method == &quot;median&quot;) { filter_val &lt;- apply(dat, 2, median, na.rm = T) nm &lt;- &quot;median&quot; } else if (qc_method == &quot;iqr&quot;) { # iqr filter_val &lt;- apply(dat, 2, IQR, na.rm = T) nm &lt;- &quot;Interquantile Range&quot; } # get the rank of the filtered variables rk &lt;- rank(-filter_val, ties.method = &quot;random&quot;) if (is.null(remain_num)) { # apply empirical filtering based on data size if (feat_num &lt; 250) { # reduce 5% remain &lt;- rk &lt; feat_num * 0.95 message(&quot;Further feature filtering based on &quot;, nm) } else if (feat_num &lt; 500) { # reduce 10% remain &lt;- rk &lt; feat_num * 0.9 message(&quot;Further feature filtering based on &quot;, nm) } else if (feat_num &lt; 1000) { # reduce 25% remain &lt;- rk &lt; feat_num * 0.75 message(&quot;Further feature filtering based on &quot;, nm) } else { # reduce 40%, if still over 5000, then only use top 5000 remain &lt;- rk &lt; feat_num * 0.6 message(&quot;Further feature filtering based on &quot;, nm) } } else { remain &lt;- rk &lt; remain_num } } res &lt;- datMatrix[, remain] return(res) } feature_res &lt;- PerformFeatureFilter(t(int_mat)) # remove QC samples feature_final &lt;- feature_res[!rownames(feature_res) %in% rownames(qc_samples), ] # save int_mat into se object target &lt;- metadata_tab %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;SampleID&quot;) %&gt;% dplyr::filter(SampleID %in% rownames(feature_final)) res &lt;- PomaSummarizedExperiment(target = target, features = feature_final) return(res) } se_filter &lt;- FilterFeature(object = se, qc_label = &quot;QC&quot;, method = &quot;iqr&quot;) se_filter ## class: SummarizedExperiment ## dim: 715 54 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(715): MEDL00066 MEDL00375 ... MW0168764 MW0169569 ## rowData names(0): ## colnames(54): CJY_V0 CJY_V1 ... ZTX2_V0 ZTX2_V1 ## colData names(5): group SampleName FMT_status gender age 10.3.3 Missing Value Imputation se_impute &lt;- PomaImpute( se_filter, ZerosAsNA = TRUE, RemoveNA = TRUE, cutoff = 20, method = &quot;knn&quot;) se_impute ## class: SummarizedExperiment ## dim: 540 54 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(540): MEDL00066 MEDL00375 ... MW0168675 MW0169569 ## rowData names(0): ## colnames(54): CJY_V0 CJY_V1 ... ZTX2_V0 ZTX2_V1 ## colData names(5): group SampleName FMT_status gender age 10.3.4 Data Normalization 10.3.4.1 Normalization by NormalizeData function NormalizeData &lt;- function( object, rowNorm = c(&quot;Quantile&quot;, &quot;GroupPQN&quot;, &quot;SamplePQN&quot;, &quot;CompNorm&quot;, &quot;SumNorm&quot;, &quot;MedianNorm&quot;, &quot;SpecNorm&quot;, &quot;None&quot;), transNorm = c(&quot;LogNorm&quot;, &quot;SrNorm&quot;, &quot;CrNorm&quot;, &quot;None&quot;), scaleNorm = c(&quot;MeanCenter&quot;, &quot;AutoNorm&quot;, &quot;ParetoNorm&quot;, &quot;RangeNorm&quot;, &quot;None&quot;), ref = NULL, SpeWeight = 1) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) data &lt;- t(features_tab) colNames &lt;- colnames(data) rowNames &lt;- rownames(data) ############################################# # Sample normalization # perform quantile normalization on the raw data (can be log transformed later by user) QuantileNormalize &lt;- function(data) { return(t(preprocessCore::normalize.quantiles(t(data), copy=FALSE))); } # normalize by a reference sample (probability quotient normalization) # ref should be the name of the reference sample ProbNorm &lt;- function(x, ref_smpl) { return(x/median(as.numeric(x/ref_smpl), na.rm = T)) } # normalize by a reference reference (i.e. creatinine) # ref should be the name of the cmpd CompNorm &lt;- function(x, ref) { return(1000*x/x[ref]) } SumNorm &lt;- function(x) { return(1000*x/sum(x, na.rm = T)) } # normalize by median MedianNorm &lt;- function(x) { return(x/median(x, na.rm = T)) } # row-wise normalization if (rowNorm == &quot;Quantile&quot;) { data &lt;- QuantileNormalize(data) # this can introduce constant variables if a variable is # at the same rank across all samples (replaced by its average across all) varCol &lt;- apply(data, 2, var, na.rm = T) constCol &lt;- (varCol == 0 | is.na(varCol)) constNum &lt;- sum(constCol, na.rm = T) if (constNum &gt; 0) { message(paste(&quot;After quantile normalization&quot;, constNum, &quot;features with a constant value were found and deleted.&quot;)) data &lt;- data[, !constCol, drop = FALSE] colNames &lt;- colnames(data) rowNames &lt;- rownames(data) } rownm &lt;- &quot;Quantile Normalization&quot; } else if (rowNorm == &quot;GroupPQN&quot;) { grp_inx &lt;- metadata_tab$group == ref ref.smpl &lt;- apply(data[grp_inx, , drop = FALSE], 2, mean) data &lt;- t(apply(data, 1, ProbNorm, ref.smpl)) rownm &lt;- &quot;Probabilistic Quotient Normalization by a reference group&quot; } else if (rowNorm == &quot;SamplePQN&quot;) { ref.smpl &lt;- data[ref, , drop = FALSE] data &lt;- t(apply(data, 1, ProbNorm, ref.smpl)) rownm &lt;- &quot;Probabilistic Quotient Normalization by a reference sample&quot; } else if (rowNorm == &quot;CompNorm&quot;) { data &lt;- t(apply(t(data), 1, CompNorm, ref)) rownm &lt;- &quot;Normalization by a reference feature&quot;; } else if (rowNorm == &quot;SumNorm&quot;) { data &lt;- t(apply(data, 1, SumNorm)) rownm &lt;- &quot;Normalization to constant sum&quot; } else if (rowNorm == &quot;MedianNorm&quot;) { data &lt;- t(apply(data, 1, MedianNorm)) rownm &lt;- &quot;Normalization to sample median&quot; } else if(rowNorm == &quot;SpecNorm&quot;) { norm.vec &lt;- rep(SpeWeight, nrow(data)) # default all same weight vec to prevent error data &lt;- data / norm.vec message(&quot;No sample specific information were given, all set to 1.0&quot;) rownm &lt;- &quot;Normalization by sample-specific factor&quot; } else { # nothing to do rownm &lt;- &quot;N/A&quot; } ################################################ # use apply will lose dimension info (i.e. row names and colnames) rownames(data) &lt;- rowNames colnames(data) &lt;- colNames # if the reference by feature, the feature column should be removed, since it is all 1 if(rowNorm == &quot;CompNorm&quot; &amp;&amp; !is.null(ref)){ inx &lt;- match(ref, colnames(data)) data &lt;- data[, -inx, drop=FALSE] colNames &lt;- colNames[-inx] } ############################################# # Data transformation # generalize log, tolerant to 0 and negative values LogNorm &lt;- function(x, min.val) { return(log10((x + sqrt(x^2 + min.val^2))/2)) } # square root, tolerant to negative values SquareRootNorm &lt;- function(x, min.val) { return(((x + sqrt(x^2 + min.val^2))/2)^(1/2)) } if (transNorm == &quot;LogNorm&quot;) { min.val &lt;- min(abs(data[data != 0]))/10 data &lt;- apply(data, 2, LogNorm, min.val) transnm &lt;- &quot;Log10 Normalization&quot; } else if (transNorm == &quot;SrNorm&quot;) { min.val &lt;- min(abs(data[data != 0]))/10 data &lt;- apply(data, 2, SquareRootNorm, min.val) transnm &lt;- &quot;Square Root Transformation&quot; } else if (transNorm == &quot;CrNorm&quot;) { norm.data &lt;- abs(data)^(1/3) norm.data[data &lt; 0] &lt;- -norm.data[data &lt; 0] data &lt;- norm.data transnm &lt;- &quot;Cubic Root Transformation&quot; } else { transnm &lt;- &quot;N/A&quot; } ############################################# ############################################# # Data scaling # normalize to zero mean and unit variance AutoNorm &lt;- function(x) { return((x - mean(x))/sd(x, na.rm = T)) } # normalize to zero mean but variance/SE ParetoNorm &lt;- function(x) { return((x - mean(x))/sqrt(sd(x, na.rm = T))) } # normalize to zero mean but variance/SE MeanCenter &lt;- function(x) { return(x - mean(x)) } # normalize to zero mean but variance/SE RangeNorm &lt;- function(x) { if (max(x) == min(x)) { return(x) } else { return((x - mean(x))/(max(x) - min(x))) } } if (scaleNorm == &quot;MeanCenter&quot;) { data &lt;- apply(data, 2, MeanCenter) scalenm &lt;- &quot;Mean Centering&quot; } else if (scaleNorm == &quot;AutoNorm&quot;) { data &lt;- apply(data, 2, AutoNorm) scalenm &lt;- &quot;Autoscaling&quot; } else if (scaleNorm == &quot;ParetoNorm&quot;) { data &lt;- apply(data, 2, ParetoNorm) scalenm &lt;- &quot;Pareto Scaling&quot; } else if (scaleNorm == &quot;RangeNorm&quot;) { data &lt;- apply(data, 2, RangeNorm) scalenm &lt;- &quot;Range Scaling&quot; } else { scalenm &lt;- &quot;N/A&quot; } ############################################# message(&quot;Row norm: &quot;, rownm, &quot;\\n&quot;, &quot;Data Transformation norm: &quot;, transnm, &quot;\\n&quot;, &quot;Data Scaling norm: &quot;, scalenm, &quot;\\n&quot;) # note after using &quot;apply&quot; function, all the attribute lost, need to add back rownames(data) &lt;- rowNames colnames(data) &lt;- colNames target &lt;- metadata_tab %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;SampleID&quot;) %&gt;% dplyr::filter(SampleID%in%rownames(data)) se &lt;- PomaSummarizedExperiment(target = target, features = data) # need to do some sanity check, for log there may be Inf values introduced res &lt;- CheckData(se) return(res) } se_normalize &lt;- NormalizeData( object = se_impute, rowNorm = &quot;None&quot;, transNorm = &quot;LogNorm&quot;, scaleNorm = &quot;ParetoNorm&quot;) se_normalize ## class: SummarizedExperiment ## dim: 540 54 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(540): MEDL00066 MEDL00375 ... MW0168675 MW0169569 ## rowData names(0): ## colnames(54): CJY_V0 CJY_V1 ... ZTX2_V0 ZTX2_V1 ## colData names(5): group SampleName FMT_status gender age 10.3.4.2 Normalization by POMA R package se_normalize_v2 &lt;- PomaNorm(se_impute, method = &quot;log_pareto&quot;) se_normalize_v2 ## class: SummarizedExperiment ## dim: 540 54 ## metadata(0): ## assays(1): &#39;&#39; ## rownames(540): MEDL00066 MEDL00375 ... MW0168675 MW0169569 ## rowData names(0): ## colnames(54): CJY_V0 CJY_V1 ... ZTX2_V0 ZTX2_V1 ## colData names(5): group SampleName FMT_status gender age 10.3.4.3 Comparison of unnormalized and normalized dataset boxplot pl_unnor &lt;- PomaBoxplots(se_impute, group = &quot;samples&quot;, jitter = FALSE) + ggtitle(&quot;Not Normalized&quot;) + theme(legend.position = &quot;none&quot;) # data before normalization pl_nor &lt;- PomaBoxplots(se_normalize, group = &quot;samples&quot;, jitter = FALSE) + ggtitle(&quot;Normalized&quot;) # data after normalization cowplot::plot_grid(pl_unnor, pl_nor, ncol = 1, align = &quot;v&quot;) density pl_unnor &lt;- PomaDensity(se_impute, group = &quot;features&quot;) + ggtitle(&quot;Not Normalized&quot;) + theme(legend.position = &quot;none&quot;) # data before normalization pl_nor &lt;- PomaDensity(se_normalize, group = &quot;features&quot;) + ggtitle(&quot;Normalized&quot;) # data after normalization cowplot::plot_grid(pl_unnor, pl_nor, ncol = 1, align = &quot;v&quot;) 10.4 Cluster Analysis 10.4.1 Hierarchical Clustering HieraCluster &lt;- function(object, method_dis = c(&quot;euclidean&quot;, &quot;bray&quot;), method_cluster = c(&quot;average&quot;, &quot;single&quot;, &quot;complete&quot;, &quot;ward&quot;, &quot;ward.D2&quot;), cluster_type = c(&quot;Agglomerative&quot;, &quot;Divisive&quot;), tree_num = 4) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) df &lt;- t(features_tab) if (cluster_type == &quot;Agglomerative&quot;) { # Agglomerative Hierarchical Clustering # Dissimilarity matrix d &lt;- dist(df, method = method_dis) # Hierarchical clustering using Linkage method hc &lt;- hclust(d, method = method_cluster) # hc &lt;- agnes(df, method = method_cluster) ####### identifying the strongest clustering structure ################ # # methods to assess # m &lt;- c( &quot;average&quot;, &quot;single&quot;, &quot;complete&quot;, &quot;ward&quot;) # names(m) &lt;- c( &quot;average&quot;, &quot;single&quot;, &quot;complete&quot;, &quot;ward&quot;) # # # function to compute coefficient # ac &lt;- function(x) { # agnes(df, method = x)$ac # } # # map_dbl(m, ac) } else if (cluster_type == &quot;Divisive&quot;) { # Divisive Hierarchical Clustering hc &lt;- diana(df, metric = method_dis) } hc_res &lt;- as.hclust(hc) sub_grp &lt;- cutree(hc_res, k = tree_num) plot(hc_res, cex = 0.6) rect.hclust(hc_res, k = tree_num, border = 2:(tree_num+1)) res &lt;- list(data=df, cluster=sub_grp, hc=hc_res) return(res) } Calculation Agg_hc_res &lt;- HieraCluster( object = se_normalize, method_dis = &quot;euclidean&quot;, method_cluster = &quot;ward.D2&quot;, cluster_type = &quot;Agglomerative&quot;, tree_num = 3) Visualization: visualize the result in a scatter plot fviz_cluster(list(data = Agg_hc_res$data, cluster = Agg_hc_res$cluster)) 10.5 Chemometrics Analysis 10.5.1 Partial Least Squares-Discriminant Analysis (PLS-DA) Calculation poma_plsda &lt;- PomaMultivariate(se_normalize, method = &quot;plsda&quot;) scatter plot poma_plsda$scoresplot + ggtitle(&quot;Scores Plot (plsda)&quot;) errors plot poma_plsda$errors_plsda_plot + ggtitle(&quot;Error Plot (plsda)&quot;) 10.5.2 Sparse Partial Least Squares-Discriminant Analysis (sPLS-DA) Even though PLS is highly efficient in a high dimensional context, the interpretability of PLS needed to be improved. sPLS has been recently developed by our team to perform simultaneous variable selection in both data sets X and Y data sets, by including LASSO penalizations in PLS on each pair of loading vectors Calculation poma_splsda &lt;- PomaMultivariate(se_normalize, method = &quot;splsda&quot;) scatter plot poma_splsda$scoresplot + ggtitle(&quot;Scores Plot (splsda)&quot;) 10.6 Univariate Analysis 10.6.1 Fold Change Analysis FoldChange &lt;- function(object, group_names, fc_cutoff = 2, cmp_type = 0, paired = FALSE) { features_tab &lt;- SummarizedExperiment::assay(object) metadata_tab &lt;- SummarizedExperiment::colData(object) metadata &lt;- metadata_tab %&gt;% data.frame() %&gt;% dplyr::filter(group %in% group_names) profile &lt;- features_tab[, pmatch(rownames(metadata), colnames(features_tab))] # make sure threshold is above 1 fc_cutoff &lt;- ifelse(fc_cutoff &gt; 1, fc_cutoff, 1/fc_cutoff) max_cutoff &lt;- fc_cutoff min_cutoff &lt;- 1 / fc_cutoff GetFC &lt;- function(x, y, cmpType, paired = FALSE) { # x = profile # y = metadata # cmpType = cmp_type # paired = paired x &lt;- t(x) colNames &lt;- colnames(x) rowNames &lt;- rownames(x) if (paired) { # compute the average of paired FC (unit is pair) G1 &lt;- x[which(y$group == group_names[1]), ] G2 &lt;- x[which(y$group == group_names[2]), ] if (cmpType == 0) { fc.mat &lt;- G1 - G2 } else { fc.mat &lt;- G2 - G1 } fc.log &lt;- apply(fc.mat, 2, mean) fc.all &lt;- signif(2^fc.log, 5) } else { m1 &lt;- colMeans(x[which(y$group == group_names[1]), ]) m2 &lt;- colMeans(x[which(y$group == group_names[2]), ]) # create a named matrix of sig vars for display if (cmpType == 0) { ratio &lt;- m1/m2 } else { ratio &lt;- m2/m1 } fc.all &lt;- signif(ratio, 5) ratio[ratio &lt; 0] &lt;- 0 fc.log &lt;- signif(log2(ratio), 5) fc.log[is.infinite(fc.log) &amp; fc.log &lt; 0] &lt;- -99 fc.log[is.infinite(fc.log) &amp; fc.log &gt; 0] &lt;- 99 } names(fc.all) &lt;- names(fc.log) &lt;- colnames(x) res &lt;- list(fc.all = fc.all, fc.log = fc.log) return(res) } res &lt;- GetFC(profile, metadata, cmp_type, paired) fc.all &lt;- res$fc.all fc.log &lt;- res$fc.log inx.up &lt;- fc.all &gt; max_cutoff inx.down &lt;- fc.all &lt; min_cutoff names(inx.up) &lt;- names(inx.down) &lt;- names(fc.all) imp.inx &lt;- inx.up | inx.down sig.mat &lt;- cbind(fc.all[imp.inx, drop = F], fc.log[imp.inx, drop = F]) colnames(sig.mat) &lt;- c(&quot;Fold Change&quot;, &quot;log2(FC)&quot;) # order by absolute log value (since symmetrical in pos and neg) inx.ord &lt;- order(abs(sig.mat[, 2]), decreasing = T) sig.mat &lt;- sig.mat[inx.ord, , drop = F] return(sig.mat) } FC_res &lt;- FoldChange( object = se_normalize, fc_cutoff = 2, group_names = c(&quot;NR&quot;, &quot;PR&quot;), cmp_type = 0, paired = FALSE) head(FC_res) ## Fold Change log2(FC) ## MEDL00066 -8.31480 -99 ## MEDL00375 -0.34779 -99 ## MEDL01844 -0.40162 -99 ## MEDL01922 -0.18899 -99 ## MEDL01994 -0.54180 -99 ## MEDL02018 -0.34413 -99 10.6.2 T Test group_names &lt;- c(&quot;NR&quot;, &quot;PR&quot;) se_normalize_subset &lt;- se_normalize[, se_normalize$group %in% group_names] se_normalize_subset$group &lt;- factor(as.character(se_normalize_subset$group)) ttest_res &lt;- PomaUnivariate(se_normalize_subset, method = &quot;ttest&quot;) head(ttest_res) ## # A tibble: 6 × 9 ## feature FC diff_means pvalue pvalueAdj mean_NR mean_PR sd_NR sd_PR ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MEDL00066 -0.12 0.174 0.506 0.833 -0.155 0.0187 0.700 0.991 ## 2 MEDL00375 -2.88 0.149 0.503 0.833 -0.0384 0.111 0.827 0.620 ## 3 MEDL00587 1.40 0.014 0.937 0.980 0.0342 0.0480 0.571 0.573 ## 4 MEDL01844 -2.49 -0.311 0.232 0.662 0.0891 -0.222 0.850 0.849 ## 5 MEDL01922 -5.29 0.069 0.812 0.931 -0.0110 0.0584 0.751 1.13 ## 6 MEDL01994 -1.85 0.117 0.0795 0.434 -0.0412 0.0760 0.182 0.245 10.6.3 Volcano plot se_impute_subset &lt;- se_impute[, se_impute$group %in% group_names] se_impute_subset$group &lt;- factor(as.character(se_impute_subset$group)) PomaVolcano(se_impute_subset, pval = &quot;raw&quot;, pval_cutoff = 0.05, log2FC = 0.5, xlim = 3, labels = TRUE, plot_title = TRUE) 10.7 Feature Selection 10.7.1 Regularized Generalized Linear Models (Lasso: alpha = 1) lasso_res &lt;- PomaLasso(se_normalize_subset, alpha = 1, labels = TRUE) cowplot::plot_grid(lasso_res$cvLassoPlot, lasso_res$coefficientPlot, ncol = 2, align = &quot;h&quot;) lasso_res$coefficients ## # A tibble: 21 × 2 ## feature coefficient ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) -0.207 ## 2 MEDL01844 -0.0577 ## 3 MEDN0366 -0.478 ## 4 MEDN1135 0.542 ## 5 MEDN1285 -0.152 ## 6 MEDP0006 0.208 ## 7 MEDP0089 -0.228 ## 8 MEDP0151 0.329 ## 9 MEDP0295 -0.134 ## 10 MEDP0401 -0.220 ## # … with 11 more rows 10.7.2 Classification (Random Forest) Calculation poma_rf &lt;- PomaRandForest(se_normalize_subset, ntest = 10, nvar = 10) poma_rf$error_tree table poma_rf$confusionMatrix$table ## Reference ## Prediction 1 2 ## 1 1 1 ## 2 0 2 Important features poma_rf$MeanDecreaseGini_plot 10.8 Network Analysis 10.8.1 Data curation features_tab &lt;- SummarizedExperiment::assay(se_filter) %&gt;% t() features_tab[is.na(features_tab)] &lt;- 0 print(features_tab[1:6, 1:10]) ## MEDL00066 MEDL00375 MEDL00587 MEDL01799 MEDL01801 MEDL01844 MEDL01922 MEDL01994 MEDL02002 ## CJY_V0 10447 31087 618200 0 0 127250 0 2590400 0 ## CJY_V1 4011900 88306 563130 51267 1046200 4172100 107560 3772200 133920 ## DGL_V0 560560 449150 1079300 304040 147100 19462000 39149 2950700 3216700 ## DGL_V1 149120 263050 2047500 24342 357050 14373000 964600 3328000 2512900 ## HXZ_V0 442540 216830 1399700 1481800 1976000 7830000 269570 2588200 3719000 ## HXZ_V1 181010 37280 1171700 0 0 5171400 196770 3097700 0 ## MEDL02018 ## CJY_V0 485040 ## CJY_V1 1400100 ## DGL_V0 684140 ## DGL_V1 1659500 ## HXZ_V0 3433700 ## HXZ_V1 3269900 10.8.2 Building network model net_single &lt;- netConstruct(features_tab, measure = &quot;sparcc&quot;, measurePar = list(iter = 20, inner_iter = 10, th = 0.1), filtTax = &quot;highestVar&quot;, filtTaxPar = list(highestVar = 50), filtSamp = &quot;totalReads&quot;, filtSampPar = list(totalReads = 100), verbose = 3, seed = 123) 10.8.3 Visualizing the network props_single &lt;- netAnalyze(net_single, clustMethod = &quot;cluster_fast_greedy&quot;) plot(props_single, nodeColor = &quot;cluster&quot;, nodeSize = &quot;eigenvector&quot;, repulsion = 0.8, rmSingles = TRUE, labelScale = FALSE, cexLabels = 1.6, nodeSizeSpread = 3, cexNodes = 2, title1 = &quot;Network on metabolomics with Pearson correlations&quot;, showTitle = TRUE, cexTitle = 1.5) legend(0.7, 1.1, cex = 1.2, title = &quot;estimated correlation:&quot;, legend = c(&quot;+&quot;,&quot;-&quot;), lty = 1, lwd = 3, col = c(&quot;#009900&quot;,&quot;red&quot;), bty = &quot;n&quot;, horiz = TRUE) 10.9 Network Analysis by WGCNA Performing Network Analysis step by step through WGCNA R package. 10.9.1 Data curation Data Matrix Row -&gt; metabolites Column -&gt; samples features_tab &lt;- SummarizedExperiment::assay(se_impute) print(features_tab[1:6, 1:10]) ## CJY_V0 CJY_V1 DGL_V0 DGL_V1 HXZ_V0 HXZ_V1 LBC_V0 LBC_V1 LHC_V1 LHC_V0 ## MEDL00066 10447 4011900 560560 149120 442540 181010 12620 173400 97848.0 25072.83 ## MEDL00375 31087 88306 449150 263050 216830 37280 302150 607850 87101.0 7595.70 ## MEDL00587 618200 563130 1079300 2047500 1399700 1171700 1120700 1109300 1025300.0 533040.00 ## MEDL01844 127250 4172100 19462000 14373000 7830000 5171400 57063 1946700 100670.0 143560.00 ## MEDL01922 184698 107560 39149 964600 269570 196770 28797 72528 140508.2 182958.02 ## MEDL01994 2590400 3772200 2950700 3328000 2588200 3097700 3373500 3283000 3427700.0 3223700.00 Data normalization # TSS features_tab_norm &lt;- XMAS2::norm_tss(phyloseq::otu_table(features_tab, taxa_are_rows = T)) %&gt;% data.frame() %&gt;% t() print(features_tab_norm[1:6, 1:10]) ## MEDL00066 MEDL00375 MEDL00587 MEDL01844 MEDL01922 MEDL01994 MEDL02002 ## CJY_V0 7.266924e-06 2.162409e-05 0.0004300194 8.851499e-05 1.284758e-04 0.0018018800 9.688354e-04 ## CJY_V1 2.018886e-03 4.443774e-05 0.0002833808 2.099503e-03 5.412682e-05 0.0018982634 6.739182e-05 ## DGL_V0 1.534502e-04 1.229523e-04 0.0002954523 5.327614e-03 1.071682e-05 0.0008077376 8.805537e-04 ## DGL_V1 3.721535e-05 6.564846e-05 0.0005109874 3.587019e-03 2.407318e-04 0.0008305572 6.271356e-04 ## HXZ_V0 1.100101e-04 5.390131e-05 0.0003479485 1.946443e-03 6.701183e-05 0.0006433951 9.244983e-04 ## HXZ_V1 6.310899e-05 1.299764e-05 0.0004085122 1.803004e-03 6.860370e-05 0.0010800105 8.873314e-04 ## MEDL02018 MEDL02174 MEDL02519 ## CJY_V0 0.0003373934 0.0008276238 5.364045e-04 ## CJY_V1 0.0007045646 0.0053125408 9.121950e-04 ## DGL_V0 0.0001872795 0.0013967809 6.574793e-04 ## DGL_V1 0.0004141556 0.0060542331 1.840278e-04 ## HXZ_V0 0.0008535762 0.0018885718 1.518648e-04 ## HXZ_V1 0.0011400479 0.0009249314 5.116427e-06 # # CSS # features_tab_norm &lt;- XMAS2::norm_css(phyloseq::otu_table(features_tab, taxa_are_rows = T)) %&gt;% # data.frame() %&gt;% t() # print(features_tab_norm[1:6, 1:10]) 10.9.2 Tuning soft thresholds Picking a threshhold value (if correlation is below threshold, remove the edge). WGCNA will try a range of soft thresholds and create a diagnostic plot. Choose a set of soft-thresholding powers powers &lt;- c(c(1:10), seq(12, 20, 2)) Call the network topology analysis function Row -&gt; samples Column -&gt; metabolites sft &lt;- pickSoftThreshold( features_tab_norm, powerVector = powers, networkType = &quot;unsigned&quot;, verbose = 2) ## pickSoftThreshold: will use block size 540. ## pickSoftThreshold: calculating connectivity for given powers... ## ..working on genes 1 through 540 of 540 ## Power SFT.R.sq slope truncated.R.sq mean.k. median.k. max.k. ## 1 1 0.1930 -1.720 0.956 76.600 76.600 125.00 ## 2 2 0.0573 -0.241 0.516 22.200 19.800 44.10 ## 3 3 0.8500 -1.090 0.860 10.600 7.420 32.90 ## 4 4 0.9330 -1.200 0.923 6.690 3.780 27.80 ## 5 5 0.9750 -1.170 0.968 4.900 2.430 24.20 ## 6 6 0.9680 -1.190 0.959 3.870 1.750 21.40 ## 7 7 0.9400 -1.160 0.923 3.200 1.350 19.20 ## 8 8 0.9570 -1.160 0.947 2.720 1.140 17.40 ## 9 9 0.9500 -1.180 0.939 2.370 1.040 15.80 ## 10 10 0.9480 -1.200 0.936 2.090 0.944 14.60 ## 11 12 0.9420 -1.200 0.930 1.700 0.686 12.60 ## 12 14 0.8850 -1.260 0.867 1.430 0.501 11.00 ## 13 16 0.8260 -1.220 0.846 1.240 0.326 9.87 ## 14 18 0.8220 -1.180 0.859 1.100 0.236 8.94 ## 15 20 0.8910 -1.140 0.942 0.989 0.191 8.19 the optimal power value par(mfrow = c(1, 2)) cex1 = 1.2 plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], xlab = &quot;Soft Threshold (power)&quot;, ylab = &quot;Scale Free Topology Model Fit, signed R^2&quot;, main = paste(&quot;Scale independence&quot;) ) text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], labels = powers, cex = cex1, col = &quot;red&quot; ) abline(h = 0.90, col = &quot;red&quot;) plot(sft$fitIndices[, 1], sft$fitIndices[, 5], xlab = &quot;Soft Threshold (power)&quot;, ylab = &quot;Mean Connectivity&quot;, type = &quot;n&quot;, main = paste(&quot;Mean connectivity&quot;) ) text(sft$fitIndices[, 1], sft$fitIndices[, 5], labels = powers, cex = cex1, col = &quot;red&quot;) Notice: We’ pick 5 but feel free to experiment with other powers to see how it affects your results. 10.9.3 Create the network using the blockwiseModules building network picked_power &lt;- 5 # temp_cor &lt;- cor # cor &lt;- WGCNA::cor netwk &lt;- blockwiseModules(features_tab_norm, # == Adjacency Function == power = picked_power, # &lt;= power here networkType = &quot;signed&quot;, # == Network construction arguments: correlation options corType = &quot;bicor&quot;, maxPOutliers = 0.05, # == Tree and Block Options == deepSplit = 2, pamRespectsDendro = F, minModuleSize = 20, maxBlockSize = 4000, # == Module Adjustments == reassignThreshold = 0, mergeCutHeight = 0.25, # == TOM == Archive the run results in TOM file (saves time) saveTOMs = T, saveTOMFileBase = paste0(&quot;./dataset/&quot;, &quot;GvHD&quot;), # == Output Options numericLabels = T, verbose = 3, randomSeed = 123) ## Calculating module eigengenes block-wise from all genes ## Flagging genes and samples with too many missing values... ## ..step 1 ## ..Working on block 1 . ## TOM calculation: adjacency.. ## ..will not use multithreading. ## Fraction of slow calculations: 0.000000 ## ..connectivity.. ## ..matrix multiplication (system BLAS).. ## ..normalization.. ## ..done. ## ..saving TOM for block 1 into file ./dataset/GvHD-block.1.RData ## ....clustering.. ## ....detecting modules.. ## ....calculating module eigengenes.. ## ....checking kME in modules.. ## ..removing 22 genes from module 1 because their KME is too low. ## ..removing 19 genes from module 2 because their KME is too low. ## ..removing 36 genes from module 3 because their KME is too low. ## ..removing 15 genes from module 4 because their KME is too low. ## ..removing 2 genes from module 5 because their KME is too low. ## ..removing 2 genes from module 6 because their KME is too low. ## ..merging modules that are too close.. ## mergeCloseModules: Merging modules whose distance is less than 0.25 ## Calculating new MEs... Modules’ number table(netwk$colors) ## ## 0 1 2 3 4 5 6 7 ## 96 128 89 68 55 44 33 27 hubs rownames(netwk$MEs) &lt;- rownames(features_tab_norm) names(netwk$colors) &lt;- colnames(features_tab_norm) names(netwk$unmergedColors) &lt;- colnames(features_tab_norm) hubs &lt;- chooseTopHubInEachModule(features_tab_norm, netwk$colors) hubs ## 0 1 2 3 4 5 6 7 ## &quot;MEDN1108&quot; &quot;MEDP1255&quot; &quot;MEDP1033&quot; &quot;MEDP0434&quot; &quot;MW0107573&quot; &quot;MEDP0065&quot; &quot;MEDP1386&quot; &quot;MEDP0389&quot; The number of features per module table(netwk$colors) %&gt;% data.frame() %&gt;% dplyr::rename(Module = Var1, Number = Freq) %&gt;% dplyr::mutate(Module_color = labels2colors(as.numeric(as.character(Module)))) %&gt;% ggplot(aes(x = Module, y = Number, fill = Module)) + geom_text(aes(label = Number), vjust = 0.5, hjust = -0.18, size = 3.5) + geom_col(color = &quot;#000000&quot;) + ggtitle(&quot;Number of features per module&quot;) + coord_flip() + scale_y_continuous(expand = c(0, 0)) + theme_classic() + theme(plot.margin = margin(2, 2, 2, 2, &quot;pt&quot;), plot.title = element_text(size = 14, hjust = 0.5, face = &quot;bold&quot;), legend.position = &quot;none&quot;) 10.9.4 plot modules mergedColors &lt;- labels2colors(netwk$colors) plotDendroAndColors( netwk$dendrograms[[1]], mergedColors[netwk$blockGenes[[1]]], &quot;Module colors&quot;, dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05 ) 10.9.5 Relationships among modules plotEigengeneNetworks(netwk$MEs, &quot;Eigengene adjacency heatmap&quot;, marDendro = c(3, 3, 2, 4), marHeatmap = c(3, 4, 2, 2), plotDendrograms = T, xLabelsAngle = 90) 10.9.6 Module (Eigengene) correlation MEs &lt;- netwk$MEs MEs_R &lt;- bicor(MEs, MEs, maxPOutliers = 0.05) idx.r &lt;- which(rownames(MEs_R) == &quot;ME0&quot;) idx.c &lt;- which(colnames(MEs_R) == &quot;ME0&quot;) MEs_R_noME0 &lt;- MEs_R[-idx.r, -idx.c] MEs_R_density &lt;- MEs_R[upper.tri(MEs_R_noME0)] %&gt;% as.data.frame() %&gt;% dplyr::rename(&quot;correlation&quot; = &quot;.&quot;) %&gt;% ggplot(aes(x=correlation)) + geom_density() + ggtitle(paste0(&quot;ME correlation density\\n without &quot;, &quot;ME0&quot;)) MEs_R_Corr &lt;- pheatmap::pheatmap(MEs_R, color = colorRampPalette(c(&quot;Blue&quot;, &quot;White&quot;, &quot;Red&quot;))(100), silent = T, breaks = seq(-1,1,length.out = 101), treeheight_row = 5, treeheight_col = 5, main = paste0(&quot;ME correlation heatmap&quot;), labels_row = rownames(MEs_R), labels_col = colnames(MEs_R)) cowplot::plot_grid(MEs_R_density, MEs_R_Corr$gtable, labels = c(&quot;A&quot;, &quot;B&quot;), label_size = 15, rel_widths = c(0.6, 1), align = &quot;h&quot;) 10.9.7 Relate Module (cluster) Assignments to Groups module_df &lt;- data.frame( featureID = names(netwk$colors), colors = labels2colors(netwk$colors) ) # Get Module Eigengenes per cluster MEs0 &lt;- moduleEigengenes(features_tab_norm, mergedColors)$eigengenes # Reorder modules so similar modules are next to each other MEs0 &lt;- orderMEs(MEs0) module_order &lt;- names(MEs0) %&gt;% gsub(&quot;ME&quot;,&quot;&quot;, .) # Add group names MEs0$group &lt;- paste0(se_impute$group, rownames(colData(se_impute))) # row.names(MEs0) == rownames(colData(se_impute)) # tidy &amp; plot data mME &lt;- MEs0 %&gt;% tidyr::pivot_longer(-group) %&gt;% mutate( name = gsub(&quot;ME&quot;, &quot;&quot;, name), name = factor(name, levels = module_order) ) mME %&gt;% ggplot(., aes(x=group, y=name, fill=value)) + geom_tile() + labs(title = &quot;Module-samples Relationships&quot;, y = &quot;Modules&quot;, fill = &quot;corr&quot;) + scale_fill_gradient2( low = &quot;blue&quot;, high = &quot;red&quot;, mid = &quot;white&quot;, midpoint = 0, limit = c(-1,1)) + theme_bw() + theme(axis.text.x = element_text(angle = 90)) Result: the black modules seems negatively associated (red shading) with the PR groups. 10.9.8 Generate and Export Networks # modules_of_interest &lt;- c(&quot;green&quot;, &quot;brown&quot;, &quot;black&quot;) # # genes_of_interest &lt;- module_df %&gt;% # subset(colors %in% modules_of_interest) # # expr_of_interest &lt;- features_tab_norm[, genes_of_interest$featureID] # # # Only recalculate TOM for modules of interest # TOM &lt;- TOMsimilarityFromExpr(expr_of_interest, # power = picked_power) # # # Add feature id to row and columns # rownames(TOM) &lt;- colnames(expr_of_interest) # colnames(TOM) &lt;- colnames(expr_of_interest) # # edge_list &lt;- data.frame(TOM) %&gt;% # tibble::rownames_to_column(&quot;featureID&quot;) %&gt;% # tidyr::pivot_longer(-featureID) %&gt;% # dplyr::rename(featureID2 = name, correlation = value) %&gt;% # unique() %&gt;% # subset(!(featureID == featureID2)) %&gt;% # dplyr::mutate( # module1 = module_df[featureID, ]$colors, # module2 = module_df[featureID2, ]$colors) # # head(edge_list) 10.9.9 Network visualization library(igraph) strength_adjust &lt;- 1 TOM &lt;- TOMsimilarityFromExpr(features_tab_norm, power = picked_power) ## TOM calculation: adjacency.. ## ..will not use multithreading. ## Fraction of slow calculations: 0.000000 ## ..connectivity.. ## ..matrix multiplication (system BLAS).. ## ..normalization.. ## ..done. # Add feature id to row and columns rownames(TOM) &lt;- colnames(features_tab_norm) colnames(TOM) &lt;- colnames(features_tab_norm) g &lt;- graph.adjacency(TOM, mode=&quot;undirected&quot;, weighted= TRUE) delete.edges(g, which(E(g)$weight &lt;1)) ## IGRAPH 08dd970 UNW- 540 540 -- ## + attr: name (v/c), weight (e/n) ## + edges from 08dd970 (vertex names): ## [1] MEDL00066--MEDL00066 MEDL00375--MEDL00375 MEDL00587--MEDL00587 MEDL01844--MEDL01844 ## [5] MEDL01922--MEDL01922 MEDL01994--MEDL01994 MEDL02002--MEDL02002 MEDL02018--MEDL02018 ## [9] MEDL02174--MEDL02174 MEDL02519--MEDL02519 MEDL02630--MEDL02630 MEDL02681--MEDL02681 ## [13] MEDN0005 --MEDN0005 MEDN0006 --MEDN0006 MEDN0007 --MEDN0007 MEDN0010 --MEDN0010 ## [17] MEDN0015 --MEDN0015 MEDN0018 --MEDN0018 MEDN0025 --MEDN0025 MEDN0032 --MEDN0032 ## [21] MEDN0036 --MEDN0036 MEDN0042 --MEDN0042 MEDN0046 --MEDN0046 MEDN0047 --MEDN0047 ## [25] MEDN0049 --MEDN0049 MEDN0052 --MEDN0052 MEDN0053 --MEDN0053 MEDN0056 --MEDN0056 ## [29] MEDN0059 --MEDN0059 MEDN0075 --MEDN0075 MEDN0089 --MEDN0089 MEDN0098 --MEDN0098 ## + ... omitted several edges E(g)$width &lt;- E(g)$weight*strength_adjust + min(E(g)$weight) E(g)$color &lt;- &quot;red&quot; plot(g) 10.10 Systematic Information devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2022-08-11 ## rstudio 2022.07.1+554 Spotted Wakerobin (desktop) ## pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.56.2 2021-11-09 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.27 2022-06-14 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 0.7.12 2022-01-28 [1] CRAN (R 4.1.2) ## bslib 0.3.1 2021-10-06 [1] CRAN (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## Cairo 1.5-14 2021-12-21 [1] CRAN (R 4.1.2) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caret 6.0-92 2022-04-19 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## circlize 0.4.14 2022-02-11 [1] CRAN (R 4.1.2) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## cli 3.3.0 2022-04-25 [1] CRAN (R 4.1.2) ## clue 0.3-60 2021-10-11 [1] CRAN (R 4.1.0) ## cluster * 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## ComplexHeatmap 2.10.0 2021-10-26 [1] Bioconductor ## corpcor 1.6.10 2021-09-16 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crmn 0.0.21 2020-02-10 [1] CRAN (R 4.1.0) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.1.0) ## data.table 1.14.2 2021-09-27 [1] CRAN (R 4.1.0) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## dendextend * 1.15.2 2021-10-28 [1] CRAN (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] CRAN (R 4.1.0) ## doParallel 1.0.17 2022-02-07 [1] CRAN (R 4.1.2) ## doSNOW 1.0.20 2022-02-04 [1] CRAN (R 4.1.2) ## dplyr * 1.0.8 2022-02-08 [1] CRAN (R 4.1.2) ## dynamicTreeCut * 1.63-1 2016-03-11 [1] CRAN (R 4.1.0) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] CRAN (R 4.1.2) ## factoextra * 1.0.7 2020-04-01 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastcluster * 1.2.3 2021-05-24 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.1.0) ## fdrtool 1.2.17 2021-11-13 [1] CRAN (R 4.1.0) ## fgsea 1.20.0 2021-10-26 [1] Bioconductor ## filematrix 1.3 2018-02-27 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## future 1.24.0 2022-02-19 [1] CRAN (R 4.1.2) ## future.apply 1.8.1 2021-08-10 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.1.0) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.1.0) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.1.0) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggraph * 2.0.5 2021-02-23 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glasso 1.11 2019-10-01 [1] CRAN (R 4.1.0) ## glmnet * 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.1.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.1.0) ## globaltest 5.48.0 2021-10-26 [1] Bioconductor ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gmp 0.6-5 2022-03-17 [1] CRAN (R 4.1.2) ## GO.db 3.14.0 2022-04-11 [1] Bioconductor ## gower 1.0.0 2022-02-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## graphlayouts 0.8.0 2022-01-03 [1] CRAN (R 4.1.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## hardhat 0.2.0 2022-01-24 [1] CRAN (R 4.1.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.0) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr * 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## huge 1.3.5 2021-06-30 [1] CRAN (R 4.1.0) ## igraph * 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## impute 1.68.0 2021-10-26 [1] Bioconductor ## ipred 0.9-12 2021-09-15 [1] CRAN (R 4.1.0) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## irlba 2.3.5 2021-12-06 [1] CRAN (R 4.1.0) ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.39 2022-04-26 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## lava 1.6.10 2021-09-02 [1] CRAN (R 4.1.0) ## lavaan 0.6-11 2022-03-31 [1] CRAN (R 4.1.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.1 2021-09-24 [1] CRAN (R 4.1.0) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.1.0) ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.2 2022-01-26 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix * 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## MetaboAnalystR * 3.2.0 2022-06-28 [1] Github (xia-lab/MetaboAnalystR@892a31b) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## mixedCCA 1.5.2 2022-07-14 [1] Github (irinagain/mixedCCA@c6d41a3) ## mixOmics 6.18.1 2021-11-18 [1] Bioconductor (R 4.1.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.1.0) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.1.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## NetCoMi * 1.0.3 2022-07-14 [1] Github (stefpeschel/NetCoMi@d4d80d3) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## parallelly 1.31.0 2022-04-07 [1] CRAN (R 4.1.2) ## pbapply 1.5-0 2021-09-16 [1] CRAN (R 4.1.0) ## pbivnorm 0.6.0 2015-01-23 [1] CRAN (R 4.1.0) ## pcaMethods 1.86.0 2021-10-26 [1] Bioconductor ## pcaPP 1.9-74 2021-04-23 [1] CRAN (R 4.1.0) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plotly * 4.10.0 2021-10-09 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.1.0) ## POMA * 1.7.2 2022-07-26 [1] Github (pcastellanoescuder/POMA@bc8a972) ## preprocessCore 1.56.0 2021-10-26 [1] Bioconductor ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## pROC 1.18.0 2021-09-03 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## psych 2.2.5 2022-05-10 [1] CRAN (R 4.1.2) ## pulsar 0.3.7 2020-08-07 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qgraph 1.9.2 2022-03-04 [1] CRAN (R 4.1.2) ## qs 0.25.3 2022-02-22 [1] CRAN (R 4.1.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## ragg 1.2.2 2022-02-21 [1] CRAN (R 4.1.2) ## randomForest 4.7-1 2022-02-03 [1] CRAN (R 4.1.2) ## RankProd 3.20.0 2021-10-26 [1] Bioconductor ## RApiSerialize 0.1.0 2014-04-19 [1] CRAN (R 4.1.0) ## rARPACK 0.11-0 2016-03-10 [1] CRAN (R 4.1.0) ## rbibutils 2.2.7 2021-12-07 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.8.2 2022-03-11 [1] CRAN (R 4.1.2) ## RcppParallel 5.1.5 2022-01-05 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## Rdpack 2.2 2022-03-19 [1] CRAN (R 4.1.2) ## readxl * 1.4.0 2022-03-28 [1] CRAN (R 4.1.2) ## recipes 0.2.0 2022-02-18 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rjson 0.2.21 2022-01-09 [1] CRAN (R 4.1.2) ## rlang 1.0.2 2022-03-04 [1] CRAN (R 4.1.2) ## rmarkdown 2.14 2022-04-25 [1] CRAN (R 4.1.2) ## Rmpfr 0.8-9 2022-06-03 [1] CRAN (R 4.1.2) ## rootSolve 1.8.2.3 2021-09-29 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## Rserve * 1.8-10 2021-11-25 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.1.0) ## scrime 1.3.5 2018-12-01 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## siggenes 1.68.0 2021-10-26 [1] Bioconductor ## snow 0.4-4 2021-10-27 [1] CRAN (R 4.1.0) ## SpiecEasi * 1.1.2 2022-07-14 [1] Github (zdk123/SpiecEasi@c463727) ## SPRING * 1.0.4 2022-08-03 [1] Github (GraceYoon/SPRING@3d641a4) ## stringfish 0.15.5 2021-12-01 [1] CRAN (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] CRAN (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.3-1 2022-03-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## textshaping 0.3.6 2021-10-13 [1] CRAN (R 4.1.0) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.6 2021-11-07 [1] CRAN (R 4.1.0) ## tidygraph 1.2.1 2022-04-05 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.1.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.1.0) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.1.0) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.1.0) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VGAM 1.1-6 2022-02-14 [1] CRAN (R 4.1.2) ## viridis 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## WGCNA * 1.71 2022-04-22 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.30 2022-03-02 [1] CRAN (R 4.1.2) ## XMAS2 2.1.7.4 2022-08-09 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.5 2022-02-21 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ──────────────────────────────────────────────────────────────────────────────────────────────── "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
